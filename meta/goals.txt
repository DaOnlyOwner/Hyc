TODO:
- Generics like List<List<int>>
  -> functions: u64 fn<T>();
- No definition of member functions. 
  -> if you want to call something like this: foo->bar();
  -> then the declaration should look like this:
  struct foo
  {
  }
  void bar(foo* this); // This is basically like an extension method 
  then:
  f->bar() 
  becomes desugared: bar(&f);
  char* to_str(int);
  -> 5.to_str() ---> calls to_str(5);
- constructors,destructors.
  there are no constructors, but something that looks like this:
  int a : a.init() -> desugared: int a; a.init();
  int a := b; OR a:=b (possible to leave out type)-> desugared: int a; a=b;
  idiomatic heap allocation: int* a : new()->init();
  special operator % <-- cannot be generic, can be overloaded.
  called when object leaves the scope
  overloading: void operator%(foo* a)
- operators:
  cannot overload operators RIGHT NOW, might come in the future.
- name return values:
int val foo()
 ^---- type is implicitly passed as a pointer.  
{
   *val = 3; <-- use it like a normal argument
   return; <-- functions like these have implicit type void.
}
a := foo(); <-- transforms into this:
int a;
foo(&a);
stuff like this:
foo(&a) = 3; 
can be lowered to:
foo(&a);
a = 3;

 


- casts
  3 as int;
- const 
- moving and copying:
  moving and copying are done explicitly RIGHT NOW, planning to implement it in the future.
- const can only be defined in front of a type.
- lambda expressions:
type declaration: [a,b](int,int)->void 
e.g. 
lambda0 := [a,b](int arg0,int arg2)->int(return type optional){if (a == 0) return b;}
lambda0.,fn(3,4);
when seen desugars into:
struct "_int,int"
{
   int c0;
   int c1;
   fptr(int;int,int) fn;
}

int "_int,intf0"("_int,int"* in, int arg0, int arg1) <- if "_int,intf0" with the respective arguments already exists, bump to "_int,intf1"
{
   if(in->c0 == 0) return in->c1;
} 
and at the calling site:
"_int,int" lambda0;
lambda0.a = a;
lambda0.b = b;
lambda0.fn = "_int,intf0"
lambda0,.fn(3,4);
one can save lambdas:
struct A
{
	[int,int](int,int)->int l;
}
A a;
a.l = [a,b](int,int){return 0;}
a.l.c0 <-- has value of a
a.l.c1 <-- has value of b
calling it:
a.l..fn(3,4); <-- the .. avoids the desugaring into fn(&a.l,3,4);
similarly if l would be a pointer: a.l->>f(3,4) avoids the above mentioned desugaring. 
- array:
int[3][3]
- unions:
// TODO: one tagged value given -> need to give all decls values.
union A
{
   int a:3; // declare a field 'a' with type 'int' and tagged value 3
   float b:2;
   c:1; // untyped 
   d:0;
}
typesafe:
A foo;
foo.a = 4; // makes a active
foo.b = 4.0; // makes b active
foo!!c // makes c active, but doesn't initialize memory 
foo??c // checks if c is active, returns true if that is the case, else false.
if(foo as int == 3) {foo??a==true;} <-- Can cast union to int type which returns the tagged value.
match(foo)
{
case a 
{} // Note the braces, they are needed here, no break
case b
{}
case c
{}
}

match() is an expression!

^--- TODO: Rewrite the parser so that it accepts an identifier not a type in "case [...]"

- function pointers: fptr(args type;return_type)
- array decl: int[5] a;
- desugar typedefs before typechecking!
- initialization list:
int[3] a {0,1,2}; 
f(int[3]{0,1,2});
A a {.first{"" },.second{""}};
- Implementation note: Save a unique pointer to BaseType in Scopes and let Type struct have a pointer to BaseType, so we don't need to compare strings. DONE
- Add foreach loop later
- infer generic type parameters at function call.
- disallow parameters like int[4] in function arg.
- operator as -> need special parsing and handling in the semantic checking.
- disallow overloading of operators with atomic types.
- const only in the beginning of a type declaration
- metaprogramming by completely compile time code execution.
- maybe simd vecs as they are already in llvm.
- for loop like: for(0..10){}...
// Need further improvement.
- define what happens when you =:
  define function copy():
  void =(A* a, B* b) <-- will be called by the compiler when copying
  {
  }
  A a;
  B b;
  the call to a = b;
  desugars into =(&a,&b);
  -> Cannot be generic
- define what happens when you move:
    

