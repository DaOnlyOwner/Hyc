// ../src/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file="LOL";
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   const Token& eat()
   {
      const Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   const Token& match_token(Token::Specifier type)
   {
      const Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is {}",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:87: \s+ :
            break;
          case 2: // rule Hyc.l:98: {kw_return} :
{ push(Token::Specifier::kw_return);}
            break;
          case 3: // rule Hyc.l:99: {comma} :
{ push(Token::Specifier::comma);}
            break;
          case 4: // rule Hyc.l:100: {rparen_l} :
{ push(Token::Specifier::rparen_l);}
            break;
          case 5: // rule Hyc.l:101: {rparen_r} :
{ push(Token::Specifier::rparen_r);}
            break;
          case 6: // rule Hyc.l:102: {integer} :
{ push(Token::Specifier::Integer); }
            break;
          case 7: // rule Hyc.l:103: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 8: // rule Hyc.l:104: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 9: // rule Hyc.l:105: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 10: // rule Hyc.l:106: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 11: // rule Hyc.l:107: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 12: // rule Hyc.l:108: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 13: // rule Hyc.l:109: {decl} :
{ push(Token::Specifier::Decl); }
            break;
          case 14: // rule Hyc.l:110: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 15: // rule Hyc.l:111: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 16: // rule Hyc.l:112: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 17: // rule Hyc.l:113: {brace_l} :
{ push(Token::Specifier::brace_l); }
            break;
          case 18: // rule Hyc.l:114: {brace_r} :
{ push(Token::Specifier::brace_r); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '}') goto S71;
  if (c1 == '{') goto S69;
  if (c1 == 'r') goto S22;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if (c1 == '=') goto S59;
  if (c1 == ';') goto S67;
  if (c1 == ':') goto S57;
  if ('1' <= c1 && c1 <= '9') goto S41;
  if (c1 == '0') goto S35;
  if (c1 == '/') goto S55;
  if (c1 == '.') goto S45;
  if (c1 == '-') goto S49;
  if (c1 == ',') goto S29;
  if (c1 == '+') goto S47;
  if (c1 == '*') goto S53;
  if (c1 == ')') goto S33;
  if (c1 == '(') goto S31;
  if (c1 == '\'') goto S61;
  if (c1 == ' ') goto S73;
  if ('\t' <= c1 && c1 <= '\r') goto S73;
  return m.FSM_HALT(c1);

S22:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S77;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S29:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S31:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S33:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S35:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S84;
  if (c1 == 'b') goto S91;
  if ('8' <= c1 && c1 <= '9') goto S98;
  if ('0' <= c1 && c1 <= '7') goto S93;
  if (c1 == '.') goto S45;
  return m.FSM_HALT(c1);

S41:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S41;
  if (c1 == '.') goto S45;
  return m.FSM_HALT(c1);

S45:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S101;
  return m.FSM_HALT(c1);

S47:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S49:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S98;
  if (c1 == '.') goto S45;
  return m.FSM_HALT(c1);

S53:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S55:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S57:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S107;
  return m.FSM_HALT(c1);

S59:
  m.FSM_TAKE(14);
  return m.FSM_HALT();

S61:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S67:
  m.FSM_TAKE(16);
  return m.FSM_HALT();

S69:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S71:
  m.FSM_TAKE(18);
  return m.FSM_HALT();

S73:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S73;
  if ('\t' <= c1 && c1 <= '\r') goto S73;
  return m.FSM_HALT(c1);

S77:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S109;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S84:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S116;
  if (c1 == 't') goto S116;
  if (c1 == 'i') goto S116;
  if (c1 == 'g') goto S116;
  if (c1 == 'd') goto S116;
  if (c1 == ':') goto S116;
  return m.FSM_HALT(c1);

S91:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S124;
  return m.FSM_HALT(c1);

S93:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('8' <= c1 && c1 <= '9') goto S98;
  if ('0' <= c1 && c1 <= '7') goto S93;
  if (c1 == '.') goto S45;
  return m.FSM_HALT(c1);

S98:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S98;
  if (c1 == '.') goto S45;
  return m.FSM_HALT(c1);

S101:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S127;
  if (c1 == 'e') goto S129;
  if (c1 == 'E') goto S129;
  if ('0' <= c1 && c1 <= '9') goto S101;
  return m.FSM_HALT(c1);

S107:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S109:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S132;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S116:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S116;
  if (c1 == 't') goto S116;
  if (c1 == 'i') goto S116;
  if (c1 == 'g') goto S116;
  if (c1 == 'd') goto S116;
  if (c1 == ':') goto S116;
  return m.FSM_HALT(c1);

S124:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S124;
  return m.FSM_HALT(c1);

S127:
  m.FSM_TAKE(7);
  return m.FSM_HALT();

S129:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S139;
  if (c1 == '+') goto S139;
  return m.FSM_HALT(c1);

S132:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S141;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S139:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S148;
  return m.FSM_HALT(c1);

S141:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S152;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S148:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S127;
  if ('0' <= c1 && c1 <= '9') goto S148;
  return m.FSM_HALT(c1);

S152:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);
}

