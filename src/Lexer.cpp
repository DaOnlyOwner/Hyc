// ../src/Lexer.cpp generated by reflex 1.5.4 from Hyc.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_debug               true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Lexer.cpp"

// --debug option enables ASSERT:
#define ASSERT(c) assert(c)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include <vector>
#include <algorithm>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   void push(Token::Type ttype)
   {
	m_tokens.emplace_back(ttype, str(), matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }
public:
   // this only has elements when Lexer.lex() is called.
   std::vector<Token> get_tokens()
   {
	return std::move(m_tokens);
   }

   const Token& eat()
   {
      const Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   void match_token(Token::Type type)
   {
      const Token& token = eat();
      if(token.type != type)
      {
          printf("not possible to match: %s", token.text);
	  abort();
      }
    }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
    set_debug(true);
  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex()
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              if (debug()) std::cerr << "--EOF rule at line 92 (start condition " << start() << ")\n";
{ push(Token::Eof); return 0;}
            }
            else
            {
              if (debug()) std::cerr << "--accepting default rule\n";
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 73: \s+
            if (debug()) std::cerr << "--accepting rule at line 73 (\"" << matcher().text() << "\")\n";
            break;
          case 2: // rule at line 74: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))u8)
            if (debug()) std::cerr << "--accepting rule at line 74 (\"" << matcher().text() << "\")\n";
{ push(Token::IntegerU8); }
            break;
          case 3: // rule at line 75: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))u16)
            if (debug()) std::cerr << "--accepting rule at line 75 (\"" << matcher().text() << "\")\n";
{ push(Token::IntegerU16); }
            break;
          case 4: // rule at line 76: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))u32)
            if (debug()) std::cerr << "--accepting rule at line 76 (\"" << matcher().text() << "\")\n";
{ push(Token::IntegerU32); }
            break;
          case 5: // rule at line 77: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))u64)
            if (debug()) std::cerr << "--accepting rule at line 77 (\"" << matcher().text() << "\")\n";
{ push(Token::IntegerU64); }
            break;
          case 6: // rule at line 78: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))s8)
            if (debug()) std::cerr << "--accepting rule at line 78 (\"" << matcher().text() << "\")\n";
{ push(Token::IntegerS8); }
            break;
          case 7: // rule at line 79: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))s16)
            if (debug()) std::cerr << "--accepting rule at line 79 (\"" << matcher().text() << "\")\n";
{ push(Token::IntegerS16); }
            break;
          case 8: // rule at line 80: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))s32)
            if (debug()) std::cerr << "--accepting rule at line 80 (\"" << matcher().text() << "\")\n";
{ push(Token::IntegerS32); }
            break;
          case 9: // rule at line 81: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))s64?)
            if (debug()) std::cerr << "--accepting rule at line 81 (\"" << matcher().text() << "\")\n";
{ push(Token::IntegerS64); }
            break;
          case 10: // rule at line 82: (?:\d*\.\d+(?:[Ee][\x2b\x2d]\d+)?f)
            if (debug()) std::cerr << "--accepting rule at line 82 (\"" << matcher().text() << "\")\n";
{ push(Token::Float); }
            break;
          case 11: // rule at line 83: (?:\d*\.\d+(?:[Ee][\x2b\x2d]\d+)?)
            if (debug()) std::cerr << "--accepting rule at line 83 (\"" << matcher().text() << "\")\n";
{ push(Token::Double); }
            break;
          case 12: // rule at line 84: (?:(?:\Q+\E))
            if (debug()) std::cerr << "--accepting rule at line 84 (\"" << matcher().text() << "\")\n";
{ push(Token::Plus); }
            break;
          case 13: // rule at line 85: (?:(?:\Q-\E))
            if (debug()) std::cerr << "--accepting rule at line 85 (\"" << matcher().text() << "\")\n";
{ push(Token::Minus); }
            break;
          case 14: // rule at line 86: (?:(?:\Q*\E))
            if (debug()) std::cerr << "--accepting rule at line 86 (\"" << matcher().text() << "\")\n";
{ push(Token::Asterix); }
            break;
          case 15: // rule at line 87: (?:(?:\Q/\E))
            if (debug()) std::cerr << "--accepting rule at line 87 (\"" << matcher().text() << "\")\n";
{ push(Token::Slash); }
            break;
          case 16: // rule at line 88: (?:(?:\Q:=\E))
            if (debug()) std::cerr << "--accepting rule at line 88 (\"" << matcher().text() << "\")\n";
{ push(Token::Decl); }
            break;
          case 17: // rule at line 89: (?:(?:\Q=\E))
            if (debug()) std::cerr << "--accepting rule at line 89 (\"" << matcher().text() << "\")\n";
{ push(Token::Equal); }
            break;
          case 18: // rule at line 90: (?:['A-Z_-z]['0-9A-Z_-z]*)
            if (debug()) std::cerr << "--accepting rule at line 90 (\"" << matcher().text() << "\")\n";
{ push(Token::Ident); }
            break;
          case 19: // rule at line 91: (?:(?:\Q;\E))
            if (debug()) std::cerr << "--accepting rule at line 91 (\"" << matcher().text() << "\")\n";
{ push(Token::Semicolon); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S41;
  if ('A' <= c1 && c1 <= 'Z') goto S41;
  if (c1 == '=') goto S39;
  if (c1 == ';') goto S47;
  if (c1 == ':') goto S37;
  if ('1' <= c1 && c1 <= '9') goto S22;
  if (c1 == '0') goto S16;
  if (c1 == '/') goto S35;
  if (c1 == '.') goto S27;
  if (c1 == '-') goto S31;
  if (c1 == '+') goto S29;
  if (c1 == '*') goto S33;
  if (c1 == '\'') goto S41;
  if (c1 == ' ') goto S49;
  if ('\t' <= c1 && c1 <= '\r') goto S49;
  return m.FSM_HALT(c1);

S16:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S53;
  if (c1 == 'b') goto S60;
  if ('8' <= c1 && c1 <= '9') goto S68;
  if ('0' <= c1 && c1 <= '7') goto S62;
  if (c1 == '.') goto S27;
  return m.FSM_HALT(c1);

S22:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S71;
  if (c1 == 's') goto S76;
  if ('0' <= c1 && c1 <= '9') goto S22;
  if (c1 == '.') goto S27;
  return m.FSM_HALT(c1);

S27:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S81;
  return m.FSM_HALT(c1);

S29:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S31:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S33:
  m.FSM_TAKE(14);
  return m.FSM_HALT();

S35:
  m.FSM_TAKE(15);
  return m.FSM_HALT();

S37:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S87;
  return m.FSM_HALT(c1);

S39:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S41:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S41;
  if ('A' <= c1 && c1 <= 'Z') goto S41;
  if ('0' <= c1 && c1 <= '9') goto S41;
  if (c1 == '\'') goto S41;
  return m.FSM_HALT(c1);

S47:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S49:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S49;
  if ('\t' <= c1 && c1 <= '\r') goto S49;
  return m.FSM_HALT(c1);

S53:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S89;
  if (c1 == 't') goto S89;
  if (c1 == 'i') goto S89;
  if (c1 == 'g') goto S89;
  if (c1 == 'd') goto S89;
  if (c1 == ':') goto S89;
  return m.FSM_HALT(c1);

S60:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S98;
  return m.FSM_HALT(c1);

S62:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S71;
  if (c1 == 's') goto S76;
  if ('8' <= c1 && c1 <= '9') goto S68;
  if ('0' <= c1 && c1 <= '7') goto S62;
  if (c1 == '.') goto S27;
  return m.FSM_HALT(c1);

S68:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S68;
  if (c1 == '.') goto S27;
  return m.FSM_HALT(c1);

S71:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S102;
  if (c1 == '6') goto S108;
  if (c1 == '3') goto S106;
  if (c1 == '1') goto S104;
  return m.FSM_HALT(c1);

S76:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S110;
  if (c1 == '6') goto S116;
  if (c1 == '3') goto S114;
  if (c1 == '1') goto S112;
  return m.FSM_HALT(c1);

S81:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S119;
  if (c1 == 'e') goto S121;
  if (c1 == 'E') goto S121;
  if ('0' <= c1 && c1 <= '9') goto S81;
  return m.FSM_HALT(c1);

S87:
  m.FSM_TAKE(16);
  return m.FSM_HALT();

S89:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S89;
  if (c1 == 'u') goto S71;
  if (c1 == 't') goto S89;
  if (c1 == 's') goto S76;
  if (c1 == 'i') goto S89;
  if (c1 == 'g') goto S89;
  if (c1 == 'd') goto S89;
  if (c1 == ':') goto S89;
  return m.FSM_HALT(c1);

S98:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S71;
  if (c1 == 's') goto S76;
  if ('0' <= c1 && c1 <= '1') goto S98;
  return m.FSM_HALT(c1);

S102:
  m.FSM_TAKE(2);
  return m.FSM_HALT();

S104:
  c1 = m.FSM_CHAR();
  if (c1 == '6') goto S124;
  return m.FSM_HALT(c1);

S106:
  c1 = m.FSM_CHAR();
  if (c1 == '2') goto S126;
  return m.FSM_HALT(c1);

S108:
  c1 = m.FSM_CHAR();
  if (c1 == '4') goto S128;
  return m.FSM_HALT(c1);

S110:
  m.FSM_TAKE(6);
  return m.FSM_HALT();

S112:
  c1 = m.FSM_CHAR();
  if (c1 == '6') goto S130;
  return m.FSM_HALT(c1);

S114:
  c1 = m.FSM_CHAR();
  if (c1 == '2') goto S132;
  return m.FSM_HALT(c1);

S116:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if (c1 == '4') goto S134;
  return m.FSM_HALT(c1);

S119:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S121:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S136;
  if (c1 == '+') goto S136;
  return m.FSM_HALT(c1);

S124:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S126:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S128:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S130:
  m.FSM_TAKE(7);
  return m.FSM_HALT();

S132:
  m.FSM_TAKE(8);
  return m.FSM_HALT();

S134:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S136:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S138;
  return m.FSM_HALT(c1);

S138:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S138;
  return m.FSM_HALT(c1);
}

