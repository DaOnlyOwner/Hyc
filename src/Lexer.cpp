// ../src/Lexer.cpp generated by reflex 1.5.4 from Hyc.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_debug               true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Lexer.cpp"

// --debug option enables ASSERT:
#define ASSERT(c) assert(c)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include <vector>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   void push(Token::TokenType ttype)
   {
	m_tokens.emplace_back(ttype, str(), matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }
public:
   // this only has elements when Lexer.lex() is called.
   std::vector<Token> get_tokens()
   {
	return std::move(m_tokens);
   }

   Token next()
   {

   }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
    set_debug(true);
  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex()
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              if (debug()) std::cerr << "--EOF (start condition " << start() << ")\n";
              return int();
            }
            else
            {
              if (debug()) std::cerr << "--accepting default rule\n";
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 41: \s+
            if (debug()) std::cerr << "--accepting rule at line 41 (\"" << matcher().text() << "\")\n";
            break;
          case 2: // rule at line 42: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9][:dgit]*))(?:u?(?:c|i|l))?)
            if (debug()) std::cerr << "--accepting rule at line 42 (\"" << matcher().text() << "\")\n";
{ push(Token::Integer); }
            break;
          case 3: // rule at line 43: (?:\d*\.\d+(?:[Ee][\x2b\x2d]\d+)?)
            if (debug()) std::cerr << "--accepting rule at line 43 (\"" << matcher().text() << "\")\n";
{ push(Token::Float); }
            break;
          case 4: // rule at line 44: (?:(?:\Q+\E))
            if (debug()) std::cerr << "--accepting rule at line 44 (\"" << matcher().text() << "\")\n";
{ push(Token::Plus); }
            break;
          case 5: // rule at line 45: (?:(?:\Q-\E))
            if (debug()) std::cerr << "--accepting rule at line 45 (\"" << matcher().text() << "\")\n";
{ push(Token::Minus); }
            break;
          case 6: // rule at line 46: (?:(?:\Q*\E))
            if (debug()) std::cerr << "--accepting rule at line 46 (\"" << matcher().text() << "\")\n";
{ push(Token::Asterix); }
            break;
          case 7: // rule at line 47: (?:(?:\Q/\E))
            if (debug()) std::cerr << "--accepting rule at line 47 (\"" << matcher().text() << "\")\n";
{ push(Token::Slash); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if ('1' <= c1 && c1 <= '9') goto S16;
  if (c1 == '0') goto S10;
  if (c1 == '/') goto S36;
  if (c1 == '.') goto S28;
  if (c1 == '-') goto S32;
  if (c1 == '+') goto S30;
  if (c1 == '*') goto S34;
  if (c1 == ' ') goto S38;
  if ('\t' <= c1 && c1 <= '\r') goto S38;
  return m.FSM_HALT(c1);

S10:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S42;
  if (c1 == 'b') goto S49;
  if ('8' <= c1 && c1 <= '9') goto S60;
  if ('0' <= c1 && c1 <= '7') goto S51;
  if (c1 == '.') goto S28;
  return m.FSM_HALT(c1);

S16:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S73;
  if (c1 == 't') goto S63;
  if (c1 == 'l') goto S77;
  if (c1 == 'i') goto S63;
  if (c1 == 'g') goto S63;
  if (c1 == 'd') goto S63;
  if (c1 == 'c') goto S77;
  if (c1 == ':') goto S63;
  if ('0' <= c1 && c1 <= '9') goto S60;
  if (c1 == '.') goto S28;
  return m.FSM_HALT(c1);

S28:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S79;
  return m.FSM_HALT(c1);

S30:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S32:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S34:
  m.FSM_TAKE(6);
  return m.FSM_HALT();

S36:
  m.FSM_TAKE(7);
  return m.FSM_HALT();

S38:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S38;
  if ('\t' <= c1 && c1 <= '\r') goto S38;
  return m.FSM_HALT(c1);

S42:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S84;
  if (c1 == 't') goto S84;
  if (c1 == 'i') goto S84;
  if (c1 == 'g') goto S84;
  if (c1 == 'd') goto S84;
  if (c1 == ':') goto S84;
  return m.FSM_HALT(c1);

S49:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S95;
  return m.FSM_HALT(c1);

S51:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S73;
  if (c1 == 'l') goto S77;
  if (c1 == 'i') goto S77;
  if (c1 == 'c') goto S77;
  if ('8' <= c1 && c1 <= '9') goto S60;
  if ('0' <= c1 && c1 <= '7') goto S51;
  if (c1 == '.') goto S28;
  return m.FSM_HALT(c1);

S60:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S60;
  if (c1 == '.') goto S28;
  return m.FSM_HALT(c1);

S63:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S73;
  if (c1 == 't') goto S63;
  if (c1 == 'l') goto S77;
  if (c1 == 'i') goto S63;
  if (c1 == 'g') goto S63;
  if (c1 == 'd') goto S63;
  if (c1 == 'c') goto S77;
  if (c1 == ':') goto S63;
  return m.FSM_HALT(c1);

S73:
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S77;
  if (c1 == 'i') goto S77;
  if (c1 == 'c') goto S77;
  return m.FSM_HALT(c1);

S77:
  m.FSM_TAKE(2);
  return m.FSM_HALT();

S79:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S102;
  if (c1 == 'E') goto S102;
  if ('0' <= c1 && c1 <= '9') goto S79;
  return m.FSM_HALT(c1);

S84:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S84;
  if (c1 == 'u') goto S73;
  if (c1 == 't') goto S84;
  if (c1 == 'l') goto S77;
  if (c1 == 'i') goto S84;
  if (c1 == 'g') goto S84;
  if (c1 == 'd') goto S84;
  if (c1 == 'c') goto S77;
  if (c1 == ':') goto S84;
  return m.FSM_HALT(c1);

S95:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S73;
  if (c1 == 'l') goto S77;
  if (c1 == 'i') goto S77;
  if (c1 == 'c') goto S77;
  if ('0' <= c1 && c1 <= '1') goto S95;
  return m.FSM_HALT(c1);

S102:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S105;
  if (c1 == '+') goto S105;
  return m.FSM_HALT(c1);

S105:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S107;
  return m.FSM_HALT(c1);

S107:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S107;
  return m.FSM_HALT(c1);
}

