// ../src/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>
#define PUSH(name) push(Token::Specifier::name)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   Token& eat()
   {
      Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   bool is_at(Token::Specifier spec, size_t amount) const
   {
	return spec == lookahead(1).type;
   }

   Token& lookahead(size_t amount)
   {
       auto minIndex = std::min(m_current_token + amount, m_tokens.size() - 1);
       return m_tokens[minIndex];
   }

   Token& match_token(Token::Specifier type)
   {
      Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is '{}'",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:137: \s+ :
            break;
          case 2: // rule Hyc.l:138: {kw_return} :
{ push(Token::Specifier::KwReturn);}
            break;
          case 3: // rule Hyc.l:139: {kw_for} :
{ push(Token::Specifier::KwFor);}
            break;
          case 4: // rule Hyc.l:140: {kw_while} :
{ push(Token::Specifier::KwWhile);}
            break;
          case 5: // rule Hyc.l:141: {kw_if} :
{ push(Token::Specifier::KwIf);}
            break;
          case 6: // rule Hyc.l:142: {kw_elif} :
{ push(Token::Specifier::KwElif);}
            break;
          case 7: // rule Hyc.l:143: {kw_else} :
{ push(Token::Specifier::KwElse);}
            break;
          case 8: // rule Hyc.l:144: {kw_struct} :
{ push(Token::Specifier::KwStruct);}
            break;
          case 9: // rule Hyc.l:145: {kw_continue} :
{ push(Token::Specifier::KwContinue);}
            break;
          case 10: // rule Hyc.l:146: {kw_fptr} :
{ push(Token::Specifier::KwFptr);}
            break;
          case 11: // rule Hyc.l:147: {kw_as} :
{ push(Token::Specifier::KwAs);}
            break;
          case 12: // rule Hyc.l:148: {kw_throw} :
{ PUSH(KwThrow);}
            break;
          case 13: // rule Hyc.l:149: {kw_union} :
{ PUSH(KwUnion);}
            break;
          case 14: // rule Hyc.l:150: {kw_namespace} :
{PUSH(KwNamespace);}
            break;
          case 15: // rule Hyc.l:151: {double_colon} :
{ PUSH(DoubleColon);}
            break;
          case 16: // rule Hyc.l:152: {double_plus} :
{ PUSH(DoublePlus);}
            break;
          case 17: // rule Hyc.l:153: {double_minus} :
{ PUSH(DoubleMinus);}
            break;
          case 18: // rule Hyc.l:154: {ex_mark} :
{ PUSH(ExclMark);}
            break;
          case 19: // rule Hyc.l:155: {tilde} :
{ PUSH(Tilde);}
            break;
          case 20: // rule Hyc.l:156: {amp} :
{ PUSH(Ampersand);}
            break;
          case 21: // rule Hyc.l:157: {perc} :
{ PUSH(Percent);}
            break;
          case 22: // rule Hyc.l:158: {sr} :
{ PUSH(ShiftRight);}
            break;
          case 23: // rule Hyc.l:159: {sl} :
{ PUSH(ShiftLeft);}
            break;
          case 24: // rule Hyc.l:160: {thrway} :
{ PUSH(ThreeWay);}
            break;
          case 25: // rule Hyc.l:161: {lessEql} :
{ PUSH(LessEql);}
            break;
          case 26: // rule Hyc.l:162: {grEql} :
{ PUSH(GreaterEql);}
            break;
          case 27: // rule Hyc.l:163: {double_eql} :
{ PUSH(DoubleEqual);}
            break;
          case 28: // rule Hyc.l:164: {not_equal} :
{ PUSH(NotEqual);}
            break;
          case 29: // rule Hyc.l:165: {caret} :
{ PUSH(Caret);}
            break;
          case 30: // rule Hyc.l:166: {or} :
{ PUSH(Or);}
            break;
          case 31: // rule Hyc.l:167: {double_amp} :
{ PUSH(DoubleAmpersand);}
            break;
          case 32: // rule Hyc.l:168: {double_or} :
{ PUSH(DoubleOr);}
            break;
          case 33: // rule Hyc.l:169: {questionmark} :
{ PUSH(QuestionMark);}
            break;
          case 34: // rule Hyc.l:170: {plus_eql} :
{ PUSH(PlusEqual);}
            break;
          case 35: // rule Hyc.l:171: {minus_eql} :
{ PUSH(MinusEqual);}
            break;
          case 36: // rule Hyc.l:172: {asterix_eql} :
{ PUSH(AsterixEqual);}
            break;
          case 37: // rule Hyc.l:173: {slash_eql} :
{ PUSH(SlashEqual);}
            break;
          case 38: // rule Hyc.l:174: {percent_equal} :
{ PUSH(PercentEqual);}
            break;
          case 39: // rule Hyc.l:175: {sl_eql} :
{ PUSH(SlEqual);}
            break;
          case 40: // rule Hyc.l:176: {sr_eql} :
{ PUSH(SrEqual);}
            break;
          case 41: // rule Hyc.l:177: {amp_eql} :
{ PUSH(AmpersandEqual);}
            break;
          case 42: // rule Hyc.l:178: {caret_eql} :
{ PUSH(CaretEqual);}
            break;
          case 43: // rule Hyc.l:179: {or_eql} :
{ PUSH(OrEqual);}
            break;
          case 44: // rule Hyc.l:180: {dot} :
{ PUSH(Dot);}
            break;
          case 45: // rule Hyc.l:181: {mem_acc} :
{ PUSH(MemAccess);}
            break;
          case 46: // rule Hyc.l:182: {comma} :
{ push(Token::Specifier::Comma);}
            break;
          case 47: // rule Hyc.l:183: {rparen_l} :
{ push(Token::Specifier::RParenL);}
            break;
          case 48: // rule Hyc.l:184: {rparen_r} :
{ push(Token::Specifier::RParenR);}
            break;
          case 49: // rule Hyc.l:185: {integer} :
{ push(Token::Specifier::Integer); }
            break;
          case 50: // rule Hyc.l:186: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 51: // rule Hyc.l:187: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 52: // rule Hyc.l:188: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 53: // rule Hyc.l:189: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 54: // rule Hyc.l:190: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 55: // rule Hyc.l:191: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 56: // rule Hyc.l:192: {decl_cpy} :
{ push(Token::Specifier::DeclCpy); }
            break;
          case 57: // rule Hyc.l:193: {decl_mv} :
{ push(Token::Specifier::DeclMv);  }
            break;
          case 58: // rule Hyc.l:194: {colon} :
{ push(Token::Specifier::Colon); }
            break;
          case 59: // rule Hyc.l:195: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 60: // rule Hyc.l:196: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 61: // rule Hyc.l:197: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 62: // rule Hyc.l:198: {brace_l} :
{ push(Token::Specifier::BraceL); }
            break;
          case 63: // rule Hyc.l:199: {brace_r} :
{ push(Token::Specifier::BraceR); }
            break;
          case 64: // rule Hyc.l:200: {bracket_r} :
{ push(Token::Specifier::BracketR); }
            break;
          case 65: // rule Hyc.l:201: {bracket_l} :
{ push(Token::Specifier::BracketL);}
            break;
          case 66: // rule Hyc.l:202: {less} :
{ push(Token::Specifier::Less); }
            break;
          case 67: // rule Hyc.l:203: {greater} :
{ push(Token::Specifier::Greater); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '~') goto S141;
  if (c1 == '}') goto S206;
  if (c1 == '|') goto S150;
  if (c1 == '{') goto S204;
  if (c1 == 'w') goto S58;
  if (c1 == 'u') goto S107;
  if (c1 == 't') goto S100;
  if (c1 == 's') goto S79;
  if (c1 == 'r') goto S43;
  if (c1 == 'n') goto S114;
  if (c1 == 'i') goto S65;
  if (c1 == 'f') goto S50;
  if (c1 == 'e') goto S72;
  if (c1 == 'c') goto S86;
  if (c1 == 'a') goto S93;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if (c1 == '^') goto S165;
  if (c1 == ']') goto S208;
  if (c1 == '[') goto S210;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if (c1 == '?') goto S168;
  if (c1 == '>') goto S159;
  if (c1 == '=') goto S162;
  if (c1 == '<') goto S155;
  if (c1 == ';') goto S202;
  if (c1 == ':') goto S121;
  if ('1' <= c1 && c1 <= '9') goto S192;
  if (c1 == '0') goto S185;
  if (c1 == '/') goto S173;
  if (c1 == '.') goto S176;
  if (c1 == '-') goto S130;
  if (c1 == ',') goto S179;
  if (c1 == '+') goto S126;
  if (c1 == '*') goto S170;
  if (c1 == ')') goto S183;
  if (c1 == '(') goto S181;
  if (c1 == '\'') goto S196;
  if (c1 == '&') goto S143;
  if (c1 == '%') goto S147;
  if (c1 == '!') goto S138;
  if (c1 == ' ') goto S212;
  if ('\t' <= c1 && c1 <= '\r') goto S212;
  return m.FSM_HALT(c1);

S43:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S216;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S50:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S230;
  if (c1 == 'o') goto S223;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S58:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S237;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S65:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S244;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S72:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S250;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S79:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S258;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S86:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S265;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S93:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S272;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S100:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S278;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S107:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S285;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S114:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S292;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S121:
  m.FSM_TAKE(58);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S301;
  if (c1 == ':') goto S299;
  if (c1 == '#') goto S303;
  return m.FSM_HALT(c1);

S126:
  m.FSM_TAKE(52);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S307;
  if (c1 == '+') goto S305;
  return m.FSM_HALT(c1);

S130:
  m.FSM_TAKE(53);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S313;
  if (c1 == '=') goto S311;
  if ('1' <= c1 && c1 <= '9') goto S192;
  if (c1 == '0') goto S185;
  if (c1 == '.') goto S315;
  if (c1 == '-') goto S309;
  return m.FSM_HALT(c1);

S138:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S317;
  return m.FSM_HALT(c1);

S141:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S143:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S321;
  if (c1 == '&') goto S319;
  return m.FSM_HALT(c1);

S147:
  m.FSM_TAKE(21);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S323;
  return m.FSM_HALT(c1);

S150:
  m.FSM_TAKE(30);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S328;
  if (c1 == '>') goto S325;
  if (c1 == '=') goto S330;
  return m.FSM_HALT(c1);

S155:
  m.FSM_TAKE(66);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S332;
  if (c1 == '=') goto S335;
  return m.FSM_HALT(c1);

S159:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S338;
  return m.FSM_HALT(c1);

S162:
  m.FSM_TAKE(59);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S340;
  return m.FSM_HALT(c1);

S165:
  m.FSM_TAKE(29);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S342;
  return m.FSM_HALT(c1);

S168:
  m.FSM_TAKE(33);
  return m.FSM_HALT();

S170:
  m.FSM_TAKE(54);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S344;
  return m.FSM_HALT(c1);

S173:
  m.FSM_TAKE(55);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S346;
  return m.FSM_HALT(c1);

S176:
  m.FSM_TAKE(44);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S348;
  return m.FSM_HALT(c1);

S179:
  m.FSM_TAKE(46);
  return m.FSM_HALT();

S181:
  m.FSM_TAKE(47);
  return m.FSM_HALT();

S183:
  m.FSM_TAKE(48);
  return m.FSM_HALT();

S185:
  m.FSM_TAKE(49);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S354;
  if (c1 == 'b') goto S361;
  if ('8' <= c1 && c1 <= '9') goto S368;
  if ('0' <= c1 && c1 <= '7') goto S363;
  if (c1 == '.') goto S315;
  return m.FSM_HALT(c1);

S192:
  m.FSM_TAKE(49);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S192;
  if (c1 == '.') goto S315;
  return m.FSM_HALT(c1);

S196:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S202:
  m.FSM_TAKE(61);
  return m.FSM_HALT();

S204:
  m.FSM_TAKE(62);
  return m.FSM_HALT();

S206:
  m.FSM_TAKE(63);
  return m.FSM_HALT();

S208:
  m.FSM_TAKE(64);
  return m.FSM_HALT();

S210:
  m.FSM_TAKE(65);
  return m.FSM_HALT();

S212:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S212;
  if ('\t' <= c1 && c1 <= '\r') goto S212;
  return m.FSM_HALT(c1);

S216:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S371;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S223:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S378;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S230:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S384;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S237:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S391;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S244:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S250:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S405;
  if (c1 == 'i') goto S398;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S258:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S412;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S265:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S419;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S272:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S278:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S426;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S285:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S433;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S292:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'm') goto S440;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S299:
  m.FSM_TAKE(15);
  return m.FSM_HALT();

S301:
  m.FSM_TAKE(56);
  return m.FSM_HALT();

S303:
  m.FSM_TAKE(57);
  return m.FSM_HALT();

S305:
  m.FSM_TAKE(16);
  return m.FSM_HALT();

S307:
  m.FSM_TAKE(34);
  return m.FSM_HALT();

S309:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S311:
  m.FSM_TAKE(35);
  return m.FSM_HALT();

S313:
  m.FSM_TAKE(45);
  return m.FSM_HALT();

S315:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S348;
  return m.FSM_HALT(c1);

S317:
  m.FSM_TAKE(28);
  return m.FSM_HALT();

S319:
  m.FSM_TAKE(31);
  return m.FSM_HALT();

S321:
  m.FSM_TAKE(41);
  return m.FSM_HALT();

S323:
  m.FSM_TAKE(38);
  return m.FSM_HALT();

S325:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S447;
  return m.FSM_HALT(c1);

S328:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S330:
  m.FSM_TAKE(43);
  return m.FSM_HALT();

S332:
  m.FSM_TAKE(23);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S449;
  return m.FSM_HALT(c1);

S335:
  m.FSM_TAKE(25);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S451;
  return m.FSM_HALT(c1);

S338:
  m.FSM_TAKE(26);
  return m.FSM_HALT();

S340:
  m.FSM_TAKE(27);
  return m.FSM_HALT();

S342:
  m.FSM_TAKE(42);
  return m.FSM_HALT();

S344:
  m.FSM_TAKE(36);
  return m.FSM_HALT();

S346:
  m.FSM_TAKE(37);
  return m.FSM_HALT();

S348:
  m.FSM_TAKE(51);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S453;
  if (c1 == 'e') goto S455;
  if (c1 == 'E') goto S455;
  if ('0' <= c1 && c1 <= '9') goto S348;
  return m.FSM_HALT(c1);

S354:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S458;
  if (c1 == 't') goto S458;
  if (c1 == 'i') goto S458;
  if (c1 == 'g') goto S458;
  if (c1 == 'd') goto S458;
  if (c1 == ':') goto S458;
  return m.FSM_HALT(c1);

S361:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S466;
  return m.FSM_HALT(c1);

S363:
  m.FSM_TAKE(49);
  c1 = m.FSM_CHAR();
  if ('8' <= c1 && c1 <= '9') goto S368;
  if ('0' <= c1 && c1 <= '7') goto S363;
  if (c1 == '.') goto S315;
  return m.FSM_HALT(c1);

S368:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S368;
  if (c1 == '.') goto S315;
  return m.FSM_HALT(c1);

S371:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S469;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S378:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S384:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S476;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S391:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S482;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S398:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S489;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S405:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S495;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S412:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S501;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S419:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S508;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S426:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S515;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S433:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S522;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S440:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S529;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S447:
  m.FSM_TAKE(40);
  return m.FSM_HALT();

S449:
  m.FSM_TAKE(39);
  return m.FSM_HALT();

S451:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S453:
  m.FSM_TAKE(50);
  return m.FSM_HALT();

S455:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S536;
  if (c1 == '+') goto S536;
  return m.FSM_HALT(c1);

S458:
  m.FSM_TAKE(49);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S458;
  if (c1 == 't') goto S458;
  if (c1 == 'i') goto S458;
  if (c1 == 'g') goto S458;
  if (c1 == 'd') goto S458;
  if (c1 == ':') goto S458;
  return m.FSM_HALT(c1);

S466:
  m.FSM_TAKE(49);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S466;
  return m.FSM_HALT(c1);

S469:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S538;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S476:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S482:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S545;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S489:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S495:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S501:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S551;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S508:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S558;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S515:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'w') goto S565;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S522:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S571;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S529:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S577;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S536:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S584;
  return m.FSM_HALT(c1);

S538:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S588;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S545:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S551:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S594;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S558:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S600;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S565:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S571:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S577:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S607;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S584:
  m.FSM_TAKE(51);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S453;
  if ('0' <= c1 && c1 <= '9') goto S584;
  return m.FSM_HALT(c1);

S588:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S594:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S600:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S614;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S607:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S621;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S614:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S628;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S621:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S634;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S628:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S634:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S641;
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);

S641:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S196;
  if ('A' <= c1 && c1 <= 'Z') goto S196;
  if ('0' <= c1 && c1 <= '9') goto S196;
  if (c1 == '\'') goto S196;
  return m.FSM_HALT(c1);
}

