// ../src/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_debug               true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Lexer.cpp"

// --debug option enables ASSERT:
#define ASSERT(c) assert(c)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include <vector>
#include <algorithm>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   const Token& eat()
   {
      const Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   const Token& match_token(Token::Specifier type)
   {
      const Token& token = eat();
      if(token.type != type)
      {
          printf("not possible to match: %s", token.text.c_str());
	  abort();
      }
      return token;
    }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
    set_debug(true);
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/*kw_u8		"u8"
kw_u16		"u16"
kw_u32		"u32"
kw_u64		"u64"
kw_s8		"s8"
kw_s16		"s16"
kw_s32		"s32"
kw_s64		"s64"
kw_float	"float"
kw_double	"double"*/

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              if (debug()) std::cerr << "--EOF rule Hyc.l:125 start(" << start() << ")\n";
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              if (debug()) std::cerr << "--default rule\n";
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:90: \s+ :
            if (debug()) std::cerr << "--rule Hyc.l:90 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
            break;
          case 2: // rule Hyc.l:101: {kw_return} :
            if (debug()) std::cerr << "--rule Hyc.l:101 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::kw_return);}
            break;
          case 3: // rule Hyc.l:102: {comma} :
            if (debug()) std::cerr << "--rule Hyc.l:102 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::comma);}
            break;
          case 4: // rule Hyc.l:103: {rparen_l} :
            if (debug()) std::cerr << "--rule Hyc.l:103 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::rparen_l);}
            break;
          case 5: // rule Hyc.l:104: {rparen_r} :
            if (debug()) std::cerr << "--rule Hyc.l:104 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::rparen_r);}
            break;
          case 6: // rule Hyc.l:105: {integerS64} :
            if (debug()) std::cerr << "--rule Hyc.l:105 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::IntegerS64); }
            break;
          case 7: // rule Hyc.l:106: {integerU8} :
            if (debug()) std::cerr << "--rule Hyc.l:106 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::IntegerU8); }
            break;
          case 8: // rule Hyc.l:107: {integerU16} :
            if (debug()) std::cerr << "--rule Hyc.l:107 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::IntegerU16); }
            break;
          case 9: // rule Hyc.l:108: {integerU32} :
            if (debug()) std::cerr << "--rule Hyc.l:108 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::IntegerU32); }
            break;
          case 10: // rule Hyc.l:109: {integerU64} :
            if (debug()) std::cerr << "--rule Hyc.l:109 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::IntegerU64); }
            break;
          case 11: // rule Hyc.l:110: {integerS8} :
            if (debug()) std::cerr << "--rule Hyc.l:110 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::IntegerS8); }
            break;
          case 12: // rule Hyc.l:111: {integerS16} :
            if (debug()) std::cerr << "--rule Hyc.l:111 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::IntegerS16); }
            break;
          case 13: // rule Hyc.l:112: {integerS32} :
            if (debug()) std::cerr << "--rule Hyc.l:112 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::IntegerS32); }
            break;
          case 14: // rule Hyc.l:113: {float} :
            if (debug()) std::cerr << "--rule Hyc.l:113 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Float); }
            break;
          case 15: // rule Hyc.l:114: {double} :
            if (debug()) std::cerr << "--rule Hyc.l:114 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Double); }
            break;
          case 16: // rule Hyc.l:115: {plus} :
            if (debug()) std::cerr << "--rule Hyc.l:115 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Plus); }
            break;
          case 17: // rule Hyc.l:116: {minus} :
            if (debug()) std::cerr << "--rule Hyc.l:116 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Minus); }
            break;
          case 18: // rule Hyc.l:117: {asterix} :
            if (debug()) std::cerr << "--rule Hyc.l:117 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Asterix); }
            break;
          case 19: // rule Hyc.l:118: {slash} :
            if (debug()) std::cerr << "--rule Hyc.l:118 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Slash); }
            break;
          case 20: // rule Hyc.l:119: {decl} :
            if (debug()) std::cerr << "--rule Hyc.l:119 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Decl); }
            break;
          case 21: // rule Hyc.l:120: {equal} :
            if (debug()) std::cerr << "--rule Hyc.l:120 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Equal); }
            break;
          case 22: // rule Hyc.l:121: {ident} :
            if (debug()) std::cerr << "--rule Hyc.l:121 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Ident); }
            break;
          case 23: // rule Hyc.l:122: {semicln} :
            if (debug()) std::cerr << "--rule Hyc.l:122 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::Semicolon); }
            break;
          case 24: // rule Hyc.l:123: {brace_l} :
            if (debug()) std::cerr << "--rule Hyc.l:123 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::brace_l); }
            break;
          case 25: // rule Hyc.l:124: {brace_r} :
            if (debug()) std::cerr << "--rule Hyc.l:124 start(" << start() << ") " << matcher().lineno() << "," << matcher().columno() << ":\"" << matcher().text() << "\"\n";
{ push(Token::Specifier::brace_r); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '}') goto S72;
  if (c1 == '{') goto S70;
  if (c1 == 'r') goto S22;
  if ('_' <= c1 && c1 <= 'z') goto S62;
  if ('A' <= c1 && c1 <= 'Z') goto S62;
  if (c1 == '=') goto S60;
  if (c1 == ';') goto S68;
  if (c1 == ':') goto S58;
  if ('1' <= c1 && c1 <= '9') goto S46;
  if (c1 == '0') goto S40;
  if (c1 == '/') goto S56;
  if (c1 == '.') goto S50;
  if (c1 == '-') goto S35;
  if (c1 == ',') goto S29;
  if (c1 == '+') goto S52;
  if (c1 == '*') goto S54;
  if (c1 == ')') goto S33;
  if (c1 == '(') goto S31;
  if (c1 == '\'') goto S62;
  if (c1 == ' ') goto S74;
  if ('\t' <= c1 && c1 <= '\r') goto S74;
  return m.FSM_HALT(c1);

S22:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S78;
  if ('_' <= c1 && c1 <= 'z') goto S62;
  if ('A' <= c1 && c1 <= 'Z') goto S62;
  if ('0' <= c1 && c1 <= '9') goto S62;
  if (c1 == '\'') goto S62;
  return m.FSM_HALT(c1);

S29:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S31:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S33:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S35:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('1' <= c1 && c1 <= '9') goto S91;
  if (c1 == '0') goto S85;
  if (c1 == '.') goto S50;
  return m.FSM_HALT(c1);

S40:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S95;
  if (c1 == 'b') goto S102;
  if ('8' <= c1 && c1 <= '9') goto S109;
  if ('0' <= c1 && c1 <= '7') goto S104;
  if (c1 == '.') goto S50;
  return m.FSM_HALT(c1);

S46:
  c1 = m.FSM_CHAR();
  if (c1 == '_') goto S112;
  if ('0' <= c1 && c1 <= '9') goto S46;
  if (c1 == '.') goto S50;
  return m.FSM_HALT(c1);

S50:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S117;
  return m.FSM_HALT(c1);

S52:
  m.FSM_TAKE(16);
  return m.FSM_HALT();

S54:
  m.FSM_TAKE(18);
  return m.FSM_HALT();

S56:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S58:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S123;
  return m.FSM_HALT(c1);

S60:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S62:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S62;
  if ('A' <= c1 && c1 <= 'Z') goto S62;
  if ('0' <= c1 && c1 <= '9') goto S62;
  if (c1 == '\'') goto S62;
  return m.FSM_HALT(c1);

S68:
  m.FSM_TAKE(23);
  return m.FSM_HALT();

S70:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S72:
  m.FSM_TAKE(25);
  return m.FSM_HALT();

S74:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S74;
  if ('\t' <= c1 && c1 <= '\r') goto S74;
  return m.FSM_HALT(c1);

S78:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S125;
  if ('_' <= c1 && c1 <= 'z') goto S62;
  if ('A' <= c1 && c1 <= 'Z') goto S62;
  if ('0' <= c1 && c1 <= '9') goto S62;
  if (c1 == '\'') goto S62;
  return m.FSM_HALT(c1);

S85:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S132;
  if (c1 == 'b') goto S139;
  if ('8' <= c1 && c1 <= '9') goto S109;
  if ('0' <= c1 && c1 <= '7') goto S141;
  if (c1 == '.') goto S50;
  return m.FSM_HALT(c1);

S91:
  c1 = m.FSM_CHAR();
  if (c1 == '_') goto S146;
  if ('0' <= c1 && c1 <= '9') goto S91;
  if (c1 == '.') goto S50;
  return m.FSM_HALT(c1);

S95:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S151;
  if (c1 == 't') goto S151;
  if (c1 == 'i') goto S151;
  if (c1 == 'g') goto S151;
  if (c1 == 'd') goto S151;
  if (c1 == ':') goto S151;
  return m.FSM_HALT(c1);

S102:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S159;
  return m.FSM_HALT(c1);

S104:
  c1 = m.FSM_CHAR();
  if (c1 == '_') goto S112;
  if ('8' <= c1 && c1 <= '9') goto S109;
  if ('0' <= c1 && c1 <= '7') goto S104;
  if (c1 == '.') goto S50;
  return m.FSM_HALT(c1);

S109:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S109;
  if (c1 == '.') goto S50;
  return m.FSM_HALT(c1);

S112:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S162;
  if (c1 == '6') goto S168;
  if (c1 == '3') goto S166;
  if (c1 == '1') goto S164;
  return m.FSM_HALT(c1);

S117:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S170;
  if (c1 == 'e') goto S172;
  if (c1 == 'E') goto S172;
  if ('0' <= c1 && c1 <= '9') goto S117;
  return m.FSM_HALT(c1);

S123:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S125:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S175;
  if ('_' <= c1 && c1 <= 'z') goto S62;
  if ('A' <= c1 && c1 <= 'Z') goto S62;
  if ('0' <= c1 && c1 <= '9') goto S62;
  if (c1 == '\'') goto S62;
  return m.FSM_HALT(c1);

S132:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S182;
  if (c1 == 't') goto S182;
  if (c1 == 'i') goto S182;
  if (c1 == 'g') goto S182;
  if (c1 == 'd') goto S182;
  if (c1 == ':') goto S182;
  return m.FSM_HALT(c1);

S139:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S190;
  return m.FSM_HALT(c1);

S141:
  c1 = m.FSM_CHAR();
  if (c1 == '_') goto S146;
  if ('8' <= c1 && c1 <= '9') goto S109;
  if ('0' <= c1 && c1 <= '7') goto S141;
  if (c1 == '.') goto S50;
  return m.FSM_HALT(c1);

S146:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S195;
  if (c1 == '6') goto S193;
  if (c1 == '3') goto S199;
  if (c1 == '1') goto S197;
  return m.FSM_HALT(c1);

S151:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S151;
  if (c1 == 't') goto S151;
  if (c1 == 'i') goto S151;
  if (c1 == 'g') goto S151;
  if (c1 == 'd') goto S151;
  if (c1 == '_') goto S112;
  if (c1 == ':') goto S151;
  return m.FSM_HALT(c1);

S159:
  c1 = m.FSM_CHAR();
  if (c1 == '_') goto S112;
  if ('0' <= c1 && c1 <= '1') goto S159;
  return m.FSM_HALT(c1);

S162:
  m.FSM_TAKE(7);
  return m.FSM_HALT();

S164:
  c1 = m.FSM_CHAR();
  if (c1 == '6') goto S201;
  return m.FSM_HALT(c1);

S166:
  c1 = m.FSM_CHAR();
  if (c1 == '2') goto S203;
  return m.FSM_HALT(c1);

S168:
  c1 = m.FSM_CHAR();
  if (c1 == '4') goto S205;
  return m.FSM_HALT(c1);

S170:
  m.FSM_TAKE(14);
  return m.FSM_HALT();

S172:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S207;
  if (c1 == '+') goto S207;
  return m.FSM_HALT(c1);

S175:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S209;
  if ('_' <= c1 && c1 <= 'z') goto S62;
  if ('A' <= c1 && c1 <= 'Z') goto S62;
  if ('0' <= c1 && c1 <= '9') goto S62;
  if (c1 == '\'') goto S62;
  return m.FSM_HALT(c1);

S182:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S182;
  if (c1 == 't') goto S182;
  if (c1 == 'i') goto S182;
  if (c1 == 'g') goto S182;
  if (c1 == 'd') goto S182;
  if (c1 == '_') goto S146;
  if (c1 == ':') goto S182;
  return m.FSM_HALT(c1);

S190:
  c1 = m.FSM_CHAR();
  if (c1 == '_') goto S146;
  if ('0' <= c1 && c1 <= '1') goto S190;
  return m.FSM_HALT(c1);

S193:
  c1 = m.FSM_CHAR();
  if (c1 == '4') goto S216;
  return m.FSM_HALT(c1);

S195:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S197:
  c1 = m.FSM_CHAR();
  if (c1 == '6') goto S218;
  return m.FSM_HALT(c1);

S199:
  c1 = m.FSM_CHAR();
  if (c1 == '2') goto S220;
  return m.FSM_HALT(c1);

S201:
  m.FSM_TAKE(8);
  return m.FSM_HALT();

S203:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S205:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S207:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S222;
  return m.FSM_HALT(c1);

S209:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S226;
  if ('_' <= c1 && c1 <= 'z') goto S62;
  if ('A' <= c1 && c1 <= 'Z') goto S62;
  if ('0' <= c1 && c1 <= '9') goto S62;
  if (c1 == '\'') goto S62;
  return m.FSM_HALT(c1);

S216:
  m.FSM_TAKE(6);
  return m.FSM_HALT();

S218:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S220:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S222:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S170;
  if ('0' <= c1 && c1 <= '9') goto S222;
  return m.FSM_HALT(c1);

S226:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S62;
  if ('A' <= c1 && c1 <= 'Z') goto S62;
  if ('0' <= c1 && c1 <= '9') goto S62;
  if (c1 == '\'') goto S62;
  return m.FSM_HALT(c1);
}

