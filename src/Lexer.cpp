// ../src/Lexer.cpp generated by reflex 1.5.4 from Hyc.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_debug               true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Lexer.cpp"

// --debug option enables ASSERT:
#define ASSERT(c) assert(c)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include <vector>
#include <algorithm>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }
public:
   const Token& eat()
   {
      const Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   const Token& match_token(Token::Specifier type)
   {
      const Token& token = eat();
      if(token.type != type)
      {
          printf("not possible to match: %s", token.text.c_str());
	  abort();
      }
      return token;
    }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
    set_debug(true);
  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/*kw_u8		"u8"
kw_u16		"u16"
kw_u32		"u32"
kw_u64		"u64"
kw_s8		"s8"
kw_s16		"s16"
kw_s32		"s32"
kw_s64		"s64"
kw_float	"float"
kw_double	"double"*/

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex()
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              if (debug()) std::cerr << "--EOF rule at line 119 (start condition " << start() << ")\n";
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              if (debug()) std::cerr << "--accepting default rule\n";
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 84: \s+
            if (debug()) std::cerr << "--accepting rule at line 84 (\"" << matcher().text() << "\")\n";
            break;
          case 2: // rule at line 95: (?:(?:\Qreturn\E))
            if (debug()) std::cerr << "--accepting rule at line 95 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::kw_return);}
            break;
          case 3: // rule at line 96: (?:(?:\Q,\E))
            if (debug()) std::cerr << "--accepting rule at line 96 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::comma);}
            break;
          case 4: // rule at line 97: (?:(?:\Q(\E))
            if (debug()) std::cerr << "--accepting rule at line 97 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::rparen_l);}
            break;
          case 5: // rule at line 98: (?:(?:\Q)\E))
            if (debug()) std::cerr << "--accepting rule at line 98 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::rparen_r);}
            break;
          case 6: // rule at line 99: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*)))
            if (debug()) std::cerr << "--accepting rule at line 99 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::IntegerS64); }
            break;
          case 7: // rule at line 100: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))u8)
            if (debug()) std::cerr << "--accepting rule at line 100 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::IntegerU8); }
            break;
          case 8: // rule at line 101: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))u16)
            if (debug()) std::cerr << "--accepting rule at line 101 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::IntegerU16); }
            break;
          case 9: // rule at line 102: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))u32)
            if (debug()) std::cerr << "--accepting rule at line 102 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::IntegerU32); }
            break;
          case 10: // rule at line 103: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))u64)
            if (debug()) std::cerr << "--accepting rule at line 103 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::IntegerU64); }
            break;
          case 11: // rule at line 104: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))s8)
            if (debug()) std::cerr << "--accepting rule at line 104 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::IntegerS8); }
            break;
          case 12: // rule at line 105: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))s16)
            if (debug()) std::cerr << "--accepting rule at line 105 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::IntegerS16); }
            break;
          case 13: // rule at line 106: (?:(?:(?:0x[:dgitx]+)|(?:0[0-7]+)|(?:0b[01]+)|(?:[1-9]\d*))s32)
            if (debug()) std::cerr << "--accepting rule at line 106 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::IntegerS32); }
            break;
          case 14: // rule at line 107: (?:\d*\.\d+(?:[Ee][\x2b\x2d]\d+)?f)
            if (debug()) std::cerr << "--accepting rule at line 107 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Float); }
            break;
          case 15: // rule at line 108: (?:\d*\.\d+(?:[Ee][\x2b\x2d]\d+)?)
            if (debug()) std::cerr << "--accepting rule at line 108 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Double); }
            break;
          case 16: // rule at line 109: (?:(?:\Q+\E))
            if (debug()) std::cerr << "--accepting rule at line 109 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Plus); }
            break;
          case 17: // rule at line 110: (?:(?:\Q-\E))
            if (debug()) std::cerr << "--accepting rule at line 110 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Minus); }
            break;
          case 18: // rule at line 111: (?:(?:\Q*\E))
            if (debug()) std::cerr << "--accepting rule at line 111 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Asterix); }
            break;
          case 19: // rule at line 112: (?:(?:\Q/\E))
            if (debug()) std::cerr << "--accepting rule at line 112 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Slash); }
            break;
          case 20: // rule at line 113: (?:(?:\Q:=\E))
            if (debug()) std::cerr << "--accepting rule at line 113 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Decl); }
            break;
          case 21: // rule at line 114: (?:(?:\Q=\E))
            if (debug()) std::cerr << "--accepting rule at line 114 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Equal); }
            break;
          case 22: // rule at line 115: (?:['A-Z_-z]['0-9A-Z_-z]*)
            if (debug()) std::cerr << "--accepting rule at line 115 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Ident); }
            break;
          case 23: // rule at line 116: (?:(?:\Q;\E))
            if (debug()) std::cerr << "--accepting rule at line 116 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::Semicolon); }
            break;
          case 24: // rule at line 117: (?:(?:\Q{\E))
            if (debug()) std::cerr << "--accepting rule at line 117 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::brace_l); }
            break;
          case 25: // rule at line 118: (?:(?:\Q}\E))
            if (debug()) std::cerr << "--accepting rule at line 118 (\"" << matcher().text() << "\")\n";
{ push(Token::Specifier::brace_r); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '}') goto S71;
  if (c1 == '{') goto S69;
  if (c1 == 'r') goto S22;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if (c1 == '=') goto S59;
  if (c1 == ';') goto S67;
  if (c1 == ':') goto S57;
  if ('1' <= c1 && c1 <= '9') goto S41;
  if (c1 == '0') goto S35;
  if (c1 == '/') goto S55;
  if (c1 == '.') goto S47;
  if (c1 == '-') goto S51;
  if (c1 == ',') goto S29;
  if (c1 == '+') goto S49;
  if (c1 == '*') goto S53;
  if (c1 == ')') goto S33;
  if (c1 == '(') goto S31;
  if (c1 == '\'') goto S61;
  if (c1 == ' ') goto S73;
  if ('\t' <= c1 && c1 <= '\r') goto S73;
  return m.FSM_HALT(c1);

S22:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S77;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S29:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S31:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S33:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S35:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S84;
  if (c1 == 'b') goto S91;
  if ('8' <= c1 && c1 <= '9') goto S100;
  if ('0' <= c1 && c1 <= '7') goto S93;
  if (c1 == '.') goto S47;
  return m.FSM_HALT(c1);

S41:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S103;
  if (c1 == 's') goto S108;
  if ('0' <= c1 && c1 <= '9') goto S41;
  if (c1 == '.') goto S47;
  return m.FSM_HALT(c1);

S47:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S112;
  return m.FSM_HALT(c1);

S49:
  m.FSM_TAKE(16);
  return m.FSM_HALT();

S51:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S53:
  m.FSM_TAKE(18);
  return m.FSM_HALT();

S55:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S57:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S118;
  return m.FSM_HALT(c1);

S59:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S61:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S67:
  m.FSM_TAKE(23);
  return m.FSM_HALT();

S69:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S71:
  m.FSM_TAKE(25);
  return m.FSM_HALT();

S73:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S73;
  if ('\t' <= c1 && c1 <= '\r') goto S73;
  return m.FSM_HALT(c1);

S77:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S120;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S84:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S127;
  if (c1 == 't') goto S127;
  if (c1 == 'i') goto S127;
  if (c1 == 'g') goto S127;
  if (c1 == 'd') goto S127;
  if (c1 == ':') goto S127;
  return m.FSM_HALT(c1);

S91:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S137;
  return m.FSM_HALT(c1);

S93:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S103;
  if (c1 == 's') goto S108;
  if ('8' <= c1 && c1 <= '9') goto S100;
  if ('0' <= c1 && c1 <= '7') goto S93;
  if (c1 == '.') goto S47;
  return m.FSM_HALT(c1);

S100:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S100;
  if (c1 == '.') goto S47;
  return m.FSM_HALT(c1);

S103:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S142;
  if (c1 == '6') goto S148;
  if (c1 == '3') goto S146;
  if (c1 == '1') goto S144;
  return m.FSM_HALT(c1);

S108:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S150;
  if (c1 == '3') goto S154;
  if (c1 == '1') goto S152;
  return m.FSM_HALT(c1);

S112:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S156;
  if (c1 == 'e') goto S158;
  if (c1 == 'E') goto S158;
  if ('0' <= c1 && c1 <= '9') goto S112;
  return m.FSM_HALT(c1);

S118:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S120:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S161;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S127:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S127;
  if (c1 == 'u') goto S103;
  if (c1 == 't') goto S127;
  if (c1 == 's') goto S108;
  if (c1 == 'i') goto S127;
  if (c1 == 'g') goto S127;
  if (c1 == 'd') goto S127;
  if (c1 == ':') goto S127;
  return m.FSM_HALT(c1);

S137:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S103;
  if (c1 == 's') goto S108;
  if ('0' <= c1 && c1 <= '1') goto S137;
  return m.FSM_HALT(c1);

S142:
  m.FSM_TAKE(7);
  return m.FSM_HALT();

S144:
  c1 = m.FSM_CHAR();
  if (c1 == '6') goto S168;
  return m.FSM_HALT(c1);

S146:
  c1 = m.FSM_CHAR();
  if (c1 == '2') goto S170;
  return m.FSM_HALT(c1);

S148:
  c1 = m.FSM_CHAR();
  if (c1 == '4') goto S172;
  return m.FSM_HALT(c1);

S150:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S152:
  c1 = m.FSM_CHAR();
  if (c1 == '6') goto S174;
  return m.FSM_HALT(c1);

S154:
  c1 = m.FSM_CHAR();
  if (c1 == '2') goto S176;
  return m.FSM_HALT(c1);

S156:
  m.FSM_TAKE(14);
  return m.FSM_HALT();

S158:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S178;
  if (c1 == '+') goto S178;
  return m.FSM_HALT(c1);

S161:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S180;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S168:
  m.FSM_TAKE(8);
  return m.FSM_HALT();

S170:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S172:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S174:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S176:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S178:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S187;
  return m.FSM_HALT(c1);

S180:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S191;
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);

S187:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S156;
  if ('0' <= c1 && c1 <= '9') goto S187;
  return m.FSM_HALT(c1);

S191:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S61;
  if ('A' <= c1 && c1 <= 'Z') goto S61;
  if ('0' <= c1 && c1 <= '9') goto S61;
  if (c1 == '\'') goto S61;
  return m.FSM_HALT(c1);
}

