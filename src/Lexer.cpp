// ../src/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   Token& eat()
   {
      Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   bool is_at(Token::Specifier spec, size_t amount) const
   {
	return spec == lookahead(1).type;
   }

   Token& lookahead(size_t amount)
   {
       auto minIndex = std::min(m_current_token + amount, m_tokens.size() - 1);
       return m_tokens[minIndex];
   }

   Token& match_token(Token::Specifier type)
   {
      Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is '{}'",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:105: \s+ :
            break;
          case 2: // rule Hyc.l:106: {kw_return} :
{ push(Token::Specifier::KwReturn);}
            break;
          case 3: // rule Hyc.l:107: {kw_for} :
{ push(Token::Specifier::KwFor);}
            break;
          case 4: // rule Hyc.l:108: {kw_while} :
{ push(Token::Specifier::KwWhile);}
            break;
          case 5: // rule Hyc.l:109: {kw_contract} :
{ push(Token::Specifier::KwContract);}
            break;
          case 6: // rule Hyc.l:110: {kw_fulfill} :
{ push(Token::Specifier::KwFulfill);}
            break;
          case 7: // rule Hyc.l:111: {kw_if} :
{ push(Token::Specifier::KwIf);}
            break;
          case 8: // rule Hyc.l:112: {kw_elif} :
{ push(Token::Specifier::KwElif);}
            break;
          case 9: // rule Hyc.l:113: {kw_else} :
{ push(Token::Specifier::KwElse);}
            break;
          case 10: // rule Hyc.l:114: {kw_struct} :
{ push(Token::Specifier::KwStruct);}
            break;
          case 11: // rule Hyc.l:115: {kw_continue} :
{ push(Token::Specifier::KwContinue);}
            break;
          case 12: // rule Hyc.l:116: {kw_fptr} :
{ push(Token::Specifier::KwFptr);}
            break;
          case 13: // rule Hyc.l:117: {comma} :
{ push(Token::Specifier::Comma);}
            break;
          case 14: // rule Hyc.l:118: {rparen_l} :
{ push(Token::Specifier::RParenL);}
            break;
          case 15: // rule Hyc.l:119: {rparen_r} :
{ push(Token::Specifier::RParenR);}
            break;
          case 16: // rule Hyc.l:120: {integer} :
{ push(Token::Specifier::Integer); }
            break;
          case 17: // rule Hyc.l:121: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 18: // rule Hyc.l:122: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 19: // rule Hyc.l:123: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 20: // rule Hyc.l:124: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 21: // rule Hyc.l:125: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 22: // rule Hyc.l:126: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 23: // rule Hyc.l:127: {decl_cpy} :
{ push(Token::Specifier::DeclCpy); }
            break;
          case 24: // rule Hyc.l:128: {decl_mv} :
{ push(Token::Specifier::DeclMv);  }
            break;
          case 25: // rule Hyc.l:129: {colon} :
{ push(Token::Specifier::Colon); }
            break;
          case 26: // rule Hyc.l:130: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 27: // rule Hyc.l:131: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 28: // rule Hyc.l:132: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 29: // rule Hyc.l:133: {brace_l} :
{ push(Token::Specifier::BraceL); }
            break;
          case 30: // rule Hyc.l:134: {brace_r} :
{ push(Token::Specifier::BraceR); }
            break;
          case 31: // rule Hyc.l:135: {bracket_r} :
{ push(Token::Specifier::BracketR); }
            break;
          case 32: // rule Hyc.l:136: {bracket_l} :
{ push(Token::Specifier::BracketL);}
            break;
          case 33: // rule Hyc.l:137: {less} :
{ push(Token::Specifier::Less); }
            break;
          case 34: // rule Hyc.l:138: {greater} :
{ push(Token::Specifier::Greater); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '}') goto S129;
  if (c1 == '{') goto S127;
  if (c1 == 'w') goto S48;
  if (c1 == 's') goto S76;
  if (c1 == 'r') goto S32;
  if (c1 == 'i') goto S62;
  if (c1 == 'f') goto S39;
  if (c1 == 'e') goto S69;
  if (c1 == 'c') goto S55;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if (c1 == ']') goto S131;
  if (c1 == '[') goto S133;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if (c1 == '>') goto S137;
  if (c1 == '=') goto S117;
  if (c1 == '<') goto S135;
  if (c1 == ';') goto S125;
  if (c1 == ':') goto S113;
  if ('1' <= c1 && c1 <= '9') goto S96;
  if (c1 == '0') goto S89;
  if (c1 == '/') goto S111;
  if (c1 == '.') goto S100;
  if (c1 == '-') goto S104;
  if (c1 == ',') goto S83;
  if (c1 == '+') goto S102;
  if (c1 == '*') goto S109;
  if (c1 == ')') goto S87;
  if (c1 == '(') goto S85;
  if (c1 == '\'') goto S119;
  if (c1 == ' ') goto S139;
  if ('\t' <= c1 && c1 <= '\r') goto S139;
  return m.FSM_HALT(c1);

S32:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S143;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S39:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S157;
  if (c1 == 'p') goto S164;
  if (c1 == 'o') goto S150;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S48:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S171;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S55:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S178;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S62:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S185;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S69:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S191;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S76:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S199;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S83:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S85:
  m.FSM_TAKE(14);
  return m.FSM_HALT();

S87:
  m.FSM_TAKE(15);
  return m.FSM_HALT();

S89:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S206;
  if (c1 == 'b') goto S213;
  if ('8' <= c1 && c1 <= '9') goto S220;
  if ('0' <= c1 && c1 <= '7') goto S215;
  if (c1 == '.') goto S100;
  return m.FSM_HALT(c1);

S96:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S96;
  if (c1 == '.') goto S100;
  return m.FSM_HALT(c1);

S100:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S223;
  return m.FSM_HALT(c1);

S102:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S104:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if ('1' <= c1 && c1 <= '9') goto S96;
  if (c1 == '0') goto S89;
  if (c1 == '.') goto S100;
  return m.FSM_HALT(c1);

S109:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S111:
  m.FSM_TAKE(22);
  return m.FSM_HALT();

S113:
  m.FSM_TAKE(25);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S229;
  if (c1 == '#') goto S231;
  return m.FSM_HALT(c1);

S117:
  m.FSM_TAKE(26);
  return m.FSM_HALT();

S119:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S125:
  m.FSM_TAKE(28);
  return m.FSM_HALT();

S127:
  m.FSM_TAKE(29);
  return m.FSM_HALT();

S129:
  m.FSM_TAKE(30);
  return m.FSM_HALT();

S131:
  m.FSM_TAKE(31);
  return m.FSM_HALT();

S133:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S135:
  m.FSM_TAKE(33);
  return m.FSM_HALT();

S137:
  m.FSM_TAKE(34);
  return m.FSM_HALT();

S139:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S139;
  if ('\t' <= c1 && c1 <= '\r') goto S139;
  return m.FSM_HALT(c1);

S143:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S233;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S150:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S240;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S157:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S246;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S164:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S253;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S171:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S260;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S178:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S267;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S185:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S191:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S281;
  if (c1 == 'i') goto S274;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S199:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S288;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S206:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S295;
  if (c1 == 't') goto S295;
  if (c1 == 'i') goto S295;
  if (c1 == 'g') goto S295;
  if (c1 == 'd') goto S295;
  if (c1 == ':') goto S295;
  return m.FSM_HALT(c1);

S213:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S303;
  return m.FSM_HALT(c1);

S215:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('8' <= c1 && c1 <= '9') goto S220;
  if ('0' <= c1 && c1 <= '7') goto S215;
  if (c1 == '.') goto S100;
  return m.FSM_HALT(c1);

S220:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S220;
  if (c1 == '.') goto S100;
  return m.FSM_HALT(c1);

S223:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S306;
  if (c1 == 'e') goto S308;
  if (c1 == 'E') goto S308;
  if ('0' <= c1 && c1 <= '9') goto S223;
  return m.FSM_HALT(c1);

S229:
  m.FSM_TAKE(23);
  return m.FSM_HALT();

S231:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S233:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S311;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S240:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S246:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S318;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S253:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S325;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S260:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S331;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S267:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S338;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S274:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S346;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S281:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S352;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S288:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S358;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S295:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S295;
  if (c1 == 't') goto S295;
  if (c1 == 'i') goto S295;
  if (c1 == 'g') goto S295;
  if (c1 == 'd') goto S295;
  if (c1 == ':') goto S295;
  return m.FSM_HALT(c1);

S303:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S303;
  return m.FSM_HALT(c1);

S306:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S308:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S365;
  if (c1 == '+') goto S365;
  return m.FSM_HALT(c1);

S311:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S367;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S318:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S374;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S325:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S331:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S381;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S338:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S387;
  if (c1 == 'i') goto S394;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S346:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S352:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S358:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S401;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S365:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S408;
  return m.FSM_HALT(c1);

S367:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S412;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S374:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S418;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S381:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S387:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S425;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S394:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S432;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S401:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S439;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S408:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S306;
  if ('0' <= c1 && c1 <= '9') goto S408;
  return m.FSM_HALT(c1);

S412:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S418:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S445;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S425:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S451;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S432:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S458;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S439:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S445:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S451:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S465;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S458:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S471;
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S465:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);

S471:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S119;
  if ('A' <= c1 && c1 <= 'Z') goto S119;
  if ('0' <= c1 && c1 <= '9') goto S119;
  if (c1 == '\'') goto S119;
  return m.FSM_HALT(c1);
}

