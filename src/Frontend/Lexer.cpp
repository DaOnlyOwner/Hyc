// ../src/Frontend/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Frontend/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Frontend/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>
#include <array>
#define PUSH(name) push(Token::Specifier::name)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   Token& eat()
   {
      Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   bool is_at(Token::Specifier spec, size_t amount) const
   {
	return spec == lookahead(1).type;
   }

   Token& lookahead(size_t amount)
   {
       auto minIndex = std::min(m_current_token + amount, m_tokens.size() - 1);
       return m_tokens[minIndex];
   }

   Token& match_token(Token::Specifier type)
   {
      Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is '{}'",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }

template<Token::Specifier... specs>
   Token& match_one_of()
   {
       Token& token = eat();
       // One of the arguments is the token type
       if (((token.type == specs) || ... ))
       {
           return token;
       }
       else
       {
           std::array<Token::Specifier, sizeof... (specs)> specs_ary = { specs... };
           std::string exp = "";
           for (auto& spec : specs_ary)
           {
               exp += fmt::format("{}, ", Token::Translate(spec));
           }
           auto descr = Error::FromToken(token);
           descr.Message = fmt::format("Expected one of '{}' but got '{}'", exp, Token::Translate(token.type));
           descr.Hint = fmt::format("The offending token is '{}'", token.text);
           Error::SyntacticalError(descr);
       }
   }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:166: \s+ :
            break;
          case 2: // rule Hyc.l:167: {kw_return} :
{ push(Token::Specifier::KwReturn);}
            break;
          case 3: // rule Hyc.l:168: {kw_for} :
{ push(Token::Specifier::KwFor);}
            break;
          case 4: // rule Hyc.l:169: {kw_while} :
{ push(Token::Specifier::KwWhile);}
            break;
          case 5: // rule Hyc.l:170: {kw_if} :
{ push(Token::Specifier::KwIf);}
            break;
          case 6: // rule Hyc.l:171: {kw_elif} :
{ push(Token::Specifier::KwElif);}
            break;
          case 7: // rule Hyc.l:172: {kw_else} :
{ push(Token::Specifier::KwElse);}
            break;
          case 8: // rule Hyc.l:173: {kw_struct} :
{ push(Token::Specifier::KwStruct);}
            break;
          case 9: // rule Hyc.l:174: {kw_continue} :
{ push(Token::Specifier::KwContinue);}
            break;
          case 10: // rule Hyc.l:175: {kw_fptr} :
{ push(Token::Specifier::KwFptr);}
            break;
          case 11: // rule Hyc.l:176: {kw_as} :
{ push(Token::Specifier::KwAs);}
            break;
          case 12: // rule Hyc.l:177: {kw_throw} :
{ PUSH(KwThrow);}
            break;
          case 13: // rule Hyc.l:178: {kw_union} :
{ PUSH(KwUnion);}
            break;
          case 14: // rule Hyc.l:179: {kw_namespace} :
{PUSH(KwNamespace);}
            break;
          case 15: // rule Hyc.l:180: {kw_match} :
{PUSH(KwMatch);}
            break;
          case 16: // rule Hyc.l:181: {kw_case} :
{PUSH(KwCase);}
            break;
          case 17: // rule Hyc.l:182: {kw_operator} :
{PUSH(KwOperator);}
            break;
          case 18: // rule Hyc.l:183: {kw_auto} :
{PUSH(KwAuto);}
            break;
          case 19: // rule Hyc.l:184: {double_colon} :
{ PUSH(DoubleColon);}
            break;
          case 20: // rule Hyc.l:185: {double_plus} :
{ PUSH(DoublePlus);}
            break;
          case 21: // rule Hyc.l:186: {double_minus} :
{ PUSH(DoubleMinus);}
            break;
          case 22: // rule Hyc.l:187: {ex_mark} :
{ PUSH(ExclMark);}
            break;
          case 23: // rule Hyc.l:188: {tilde} :
{ PUSH(Tilde);}
            break;
          case 24: // rule Hyc.l:189: {amp} :
{ PUSH(Ampersand);}
            break;
          case 25: // rule Hyc.l:190: {perc} :
{ PUSH(Percent);}
            break;
          case 26: // rule Hyc.l:191: {sr} :
{ PUSH(ShiftRight);}
            break;
          case 27: // rule Hyc.l:192: {sl} :
{ PUSH(ShiftLeft);}
            break;
          case 28: // rule Hyc.l:193: {thrway} :
{ PUSH(ThreeWay);}
            break;
          case 29: // rule Hyc.l:194: {lessEql} :
{ PUSH(LessEql);}
            break;
          case 30: // rule Hyc.l:195: {grEql} :
{ PUSH(GreaterEql);}
            break;
          case 31: // rule Hyc.l:196: {double_eql} :
{ PUSH(DoubleEqual);}
            break;
          case 32: // rule Hyc.l:197: {not_equal} :
{ PUSH(NotEqual);}
            break;
          case 33: // rule Hyc.l:198: {caret} :
{ PUSH(Caret);}
            break;
          case 34: // rule Hyc.l:199: {or} :
{ PUSH(Or);}
            break;
          case 35: // rule Hyc.l:200: {double_amp} :
{ PUSH(DoubleAmpersand);}
            break;
          case 36: // rule Hyc.l:201: {double_or} :
{ PUSH(DoubleOr);}
            break;
          case 37: // rule Hyc.l:202: {questionmark} :
{ PUSH(QuestionMark);}
            break;
          case 38: // rule Hyc.l:203: {plus_eql} :
{ PUSH(PlusEqual);}
            break;
          case 39: // rule Hyc.l:204: {minus_eql} :
{ PUSH(MinusEqual);}
            break;
          case 40: // rule Hyc.l:205: {asterix_eql} :
{ PUSH(AsterixEqual);}
            break;
          case 41: // rule Hyc.l:206: {slash_eql} :
{ PUSH(SlashEqual);}
            break;
          case 42: // rule Hyc.l:207: {percent_equal} :
{ PUSH(PercentEqual);}
            break;
          case 43: // rule Hyc.l:208: {sl_eql} :
{ PUSH(SlEqual);}
            break;
          case 44: // rule Hyc.l:209: {sr_eql} :
{ PUSH(SrEqual);}
            break;
          case 45: // rule Hyc.l:210: {amp_eql} :
{ PUSH(AmpersandEqual);}
            break;
          case 46: // rule Hyc.l:211: {caret_eql} :
{ PUSH(CaretEqual);}
            break;
          case 47: // rule Hyc.l:212: {or_eql} :
{ PUSH(OrEqual);}
            break;
          case 48: // rule Hyc.l:213: {dot} :
{ PUSH(Dot);}
            break;
          case 49: // rule Hyc.l:214: {mem_acc} :
{ PUSH(MemAccess);}
            break;
          case 50: // rule Hyc.l:215: {comma} :
{ push(Token::Specifier::Comma);}
            break;
          case 51: // rule Hyc.l:216: {rparen_l} :
{ push(Token::Specifier::RParenL);}
            break;
          case 52: // rule Hyc.l:217: {rparen_r} :
{ push(Token::Specifier::RParenR);}
            break;
          case 53: // rule Hyc.l:218: {integer} :
{ push(Token::Specifier::Integer); }
            break;
          case 54: // rule Hyc.l:219: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 55: // rule Hyc.l:220: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 56: // rule Hyc.l:221: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 57: // rule Hyc.l:222: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 58: // rule Hyc.l:223: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 59: // rule Hyc.l:224: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 60: // rule Hyc.l:225: {decl_cpy} :
{ push(Token::Specifier::DeclCpy); }
            break;
          case 61: // rule Hyc.l:226: {decl_mv} :
{ push(Token::Specifier::DeclMv);  }
            break;
          case 62: // rule Hyc.l:227: {colon} :
{ push(Token::Specifier::Colon); }
            break;
          case 63: // rule Hyc.l:228: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 64: // rule Hyc.l:229: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 65: // rule Hyc.l:230: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 66: // rule Hyc.l:231: {brace_l} :
{ push(Token::Specifier::BraceL); }
            break;
          case 67: // rule Hyc.l:232: {brace_r} :
{ push(Token::Specifier::BraceR); }
            break;
          case 68: // rule Hyc.l:233: {bracket_r} :
{ push(Token::Specifier::BracketR); }
            break;
          case 69: // rule Hyc.l:234: {bracket_l} :
{ push(Token::Specifier::BracketL);}
            break;
          case 70: // rule Hyc.l:235: {less} :
{ push(Token::Specifier::Less); }
            break;
          case 71: // rule Hyc.l:236: {greater} :
{ push(Token::Specifier::Greater); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '~') goto S156;
  if (c1 == '}') goto S221;
  if (c1 == '|') goto S165;
  if (c1 == '{') goto S219;
  if (c1 == 'w') goto S60;
  if (c1 == 'u') goto S111;
  if (c1 == 't') goto S104;
  if (c1 == 's') goto S81;
  if (c1 == 'r') goto S45;
  if (c1 == 'o') goto S132;
  if (c1 == 'n') goto S118;
  if (c1 == 'm') goto S125;
  if (c1 == 'i') goto S67;
  if (c1 == 'f') goto S52;
  if (c1 == 'e') goto S74;
  if (c1 == 'c') goto S88;
  if (c1 == 'a') goto S96;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if (c1 == '^') goto S180;
  if (c1 == ']') goto S223;
  if (c1 == '[') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if (c1 == '?') goto S183;
  if (c1 == '>') goto S174;
  if (c1 == '=') goto S177;
  if (c1 == '<') goto S170;
  if (c1 == ';') goto S217;
  if (c1 == ':') goto S139;
  if ('1' <= c1 && c1 <= '9') goto S207;
  if (c1 == '0') goto S200;
  if (c1 == '/') goto S188;
  if (c1 == '.') goto S191;
  if (c1 == '-') goto S148;
  if (c1 == ',') goto S194;
  if (c1 == '+') goto S144;
  if (c1 == '*') goto S185;
  if (c1 == ')') goto S198;
  if (c1 == '(') goto S196;
  if (c1 == '\'') goto S211;
  if (c1 == '&') goto S158;
  if (c1 == '%') goto S162;
  if (c1 == '!') goto S153;
  if (c1 == ' ') goto S227;
  if ('\t' <= c1 && c1 <= '\r') goto S227;
  return m.FSM_HALT(c1);

S45:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S231;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S52:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S245;
  if (c1 == 'o') goto S238;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S60:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S252;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S67:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S259;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S74:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S265;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S81:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S273;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S88:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S280;
  if (c1 == 'a') goto S287;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S96:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S300;
  if (c1 == 's') goto S294;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S104:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S307;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S111:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S314;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S118:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S321;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S125:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S328;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S132:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S335;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S139:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S344;
  if (c1 == ':') goto S342;
  if (c1 == '#') goto S346;
  return m.FSM_HALT(c1);

S144:
  m.FSM_TAKE(56);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S350;
  if (c1 == '+') goto S348;
  return m.FSM_HALT(c1);

S148:
  m.FSM_TAKE(57);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S356;
  if (c1 == '=') goto S354;
  if (c1 == '-') goto S352;
  return m.FSM_HALT(c1);

S153:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S358;
  return m.FSM_HALT(c1);

S156:
  m.FSM_TAKE(23);
  return m.FSM_HALT();

S158:
  m.FSM_TAKE(24);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S362;
  if (c1 == '&') goto S360;
  return m.FSM_HALT(c1);

S162:
  m.FSM_TAKE(25);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S364;
  return m.FSM_HALT(c1);

S165:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S369;
  if (c1 == '>') goto S366;
  if (c1 == '=') goto S371;
  return m.FSM_HALT(c1);

S170:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S373;
  if (c1 == '=') goto S376;
  return m.FSM_HALT(c1);

S174:
  m.FSM_TAKE(71);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S379;
  return m.FSM_HALT(c1);

S177:
  m.FSM_TAKE(63);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S381;
  return m.FSM_HALT(c1);

S180:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S383;
  return m.FSM_HALT(c1);

S183:
  m.FSM_TAKE(37);
  return m.FSM_HALT();

S185:
  m.FSM_TAKE(58);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S385;
  return m.FSM_HALT(c1);

S188:
  m.FSM_TAKE(59);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S387;
  return m.FSM_HALT(c1);

S191:
  m.FSM_TAKE(48);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S389;
  return m.FSM_HALT(c1);

S194:
  m.FSM_TAKE(50);
  return m.FSM_HALT();

S196:
  m.FSM_TAKE(51);
  return m.FSM_HALT();

S198:
  m.FSM_TAKE(52);
  return m.FSM_HALT();

S200:
  m.FSM_TAKE(53);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S395;
  if (c1 == 'b') goto S402;
  if ('8' <= c1 && c1 <= '9') goto S411;
  if ('0' <= c1 && c1 <= '7') goto S406;
  if (c1 == '.') goto S404;
  return m.FSM_HALT(c1);

S207:
  m.FSM_TAKE(53);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S207;
  if (c1 == '.') goto S404;
  return m.FSM_HALT(c1);

S211:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S217:
  m.FSM_TAKE(65);
  return m.FSM_HALT();

S219:
  m.FSM_TAKE(66);
  return m.FSM_HALT();

S221:
  m.FSM_TAKE(67);
  return m.FSM_HALT();

S223:
  m.FSM_TAKE(68);
  return m.FSM_HALT();

S225:
  m.FSM_TAKE(69);
  return m.FSM_HALT();

S227:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S227;
  if ('\t' <= c1 && c1 <= '\r') goto S227;
  return m.FSM_HALT(c1);

S231:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S414;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S238:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S421;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S245:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S427;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S252:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S434;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S259:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S265:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S448;
  if (c1 == 'i') goto S441;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S273:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S455;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S280:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S462;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S287:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S469;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S294:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S300:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S476;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S307:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S483;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S314:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S490;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S321:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'm') goto S497;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S328:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S504;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S335:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S511;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S342:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S344:
  m.FSM_TAKE(60);
  return m.FSM_HALT();

S346:
  m.FSM_TAKE(61);
  return m.FSM_HALT();

S348:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S350:
  m.FSM_TAKE(38);
  return m.FSM_HALT();

S352:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S354:
  m.FSM_TAKE(39);
  return m.FSM_HALT();

S356:
  m.FSM_TAKE(49);
  return m.FSM_HALT();

S358:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S360:
  m.FSM_TAKE(35);
  return m.FSM_HALT();

S362:
  m.FSM_TAKE(45);
  return m.FSM_HALT();

S364:
  m.FSM_TAKE(42);
  return m.FSM_HALT();

S366:
  m.FSM_TAKE(26);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S518;
  return m.FSM_HALT(c1);

S369:
  m.FSM_TAKE(36);
  return m.FSM_HALT();

S371:
  m.FSM_TAKE(47);
  return m.FSM_HALT();

S373:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S520;
  return m.FSM_HALT(c1);

S376:
  m.FSM_TAKE(29);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S522;
  return m.FSM_HALT(c1);

S379:
  m.FSM_TAKE(30);
  return m.FSM_HALT();

S381:
  m.FSM_TAKE(31);
  return m.FSM_HALT();

S383:
  m.FSM_TAKE(46);
  return m.FSM_HALT();

S385:
  m.FSM_TAKE(40);
  return m.FSM_HALT();

S387:
  m.FSM_TAKE(41);
  return m.FSM_HALT();

S389:
  m.FSM_TAKE(55);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S524;
  if (c1 == 'e') goto S526;
  if (c1 == 'E') goto S526;
  if ('0' <= c1 && c1 <= '9') goto S389;
  return m.FSM_HALT(c1);

S395:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S529;
  if (c1 == 't') goto S529;
  if (c1 == 'i') goto S529;
  if (c1 == 'g') goto S529;
  if (c1 == 'd') goto S529;
  if (c1 == ':') goto S529;
  return m.FSM_HALT(c1);

S402:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S537;
  return m.FSM_HALT(c1);

S404:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S389;
  return m.FSM_HALT(c1);

S406:
  m.FSM_TAKE(53);
  c1 = m.FSM_CHAR();
  if ('8' <= c1 && c1 <= '9') goto S411;
  if ('0' <= c1 && c1 <= '7') goto S406;
  if (c1 == '.') goto S404;
  return m.FSM_HALT(c1);

S411:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S411;
  if (c1 == '.') goto S404;
  return m.FSM_HALT(c1);

S414:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S540;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S421:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S427:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S547;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S434:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S553;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S441:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S560;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S448:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S566;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S455:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S572;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S462:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S579;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S469:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S586;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S476:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S592;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S483:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S598;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S490:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S605;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S497:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S612;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S504:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S619;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S511:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S626;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S518:
  m.FSM_TAKE(44);
  return m.FSM_HALT();

S520:
  m.FSM_TAKE(43);
  return m.FSM_HALT();

S522:
  m.FSM_TAKE(28);
  return m.FSM_HALT();

S524:
  m.FSM_TAKE(54);
  return m.FSM_HALT();

S526:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S633;
  if (c1 == '+') goto S633;
  return m.FSM_HALT(c1);

S529:
  m.FSM_TAKE(53);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S529;
  if (c1 == 't') goto S529;
  if (c1 == 'i') goto S529;
  if (c1 == 'g') goto S529;
  if (c1 == 'd') goto S529;
  if (c1 == ':') goto S529;
  return m.FSM_HALT(c1);

S537:
  m.FSM_TAKE(53);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S537;
  return m.FSM_HALT(c1);

S540:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S635;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S547:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S553:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S642;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S560:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S566:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S572:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S648;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S579:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S655;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S586:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S592:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S598:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'w') goto S662;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S605:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S668;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S612:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S674;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S619:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S681;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S626:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S687;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S633:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S694;
  return m.FSM_HALT(c1);

S635:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S698;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S642:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S648:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S704;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S655:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S710;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S662:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S668:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S674:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S717;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S681:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S687:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S724;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S694:
  m.FSM_TAKE(55);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S524;
  if ('0' <= c1 && c1 <= '9') goto S694;
  return m.FSM_HALT(c1);

S698:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S704:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S710:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S731;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S717:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S738;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S724:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S745;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S731:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S752;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S738:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S758;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S745:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S765;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S752:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S758:
  m.FSM_TAKE(64);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S771;
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S765:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);

S771:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S211;
  if ('A' <= c1 && c1 <= 'Z') goto S211;
  if ('0' <= c1 && c1 <= '9') goto S211;
  if (c1 == '\'') goto S211;
  return m.FSM_HALT(c1);
}

