// ../src/Frontend/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Frontend/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Frontend/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>
#include <array>
#define PUSH(name) push(Token::Specifier::name)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   typedef size_t TokenPos;
   TokenPos get_tk_pos(){return m_current_token;}
   void goto_tk_pos(TokenPos tp) {m_current_token = tp;}
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   Token& eat()
   {
      Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   bool is_at(Token::Specifier spec, size_t amount) const
   {
	return spec == lookahead(1).type;
   }

   Token& lookahead(size_t amount)
   {
       auto minIndex = std::min(m_current_token + amount, m_tokens.size() - 1);
       return m_tokens[minIndex];
   }

   Token& match_token(Token::Specifier type)
   {
      Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is '{}'",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }

template<Token::Specifier... specs>
   Token& match_one_of()
   {
       Token& token = eat();
       // One of the arguments is the token type
       if (((token.type == specs) || ... ))
       {
           return token;
       }
       else
       {
           std::array<Token::Specifier, sizeof... (specs)> specs_ary = { specs... };
           std::string exp = "";
           for (auto& spec : specs_ary)
           {
               exp += fmt::format("{}, ", Token::Translate(spec));
           }
           auto descr = Error::FromToken(token);
           descr.Message = fmt::format("Expected one of '{}' but got '{}'", exp, Token::Translate(token.type));
           descr.Hint = fmt::format("The offending token is '{}'", token.text);
           Error::SyntacticalError(descr);
       }
   }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:181: \s+ :
            break;
          case 2: // rule Hyc.l:182: {kw_return} :
{ push(Token::Specifier::KwReturn);}
            break;
          case 3: // rule Hyc.l:183: {kw_for} :
{ push(Token::Specifier::KwFor);}
            break;
          case 4: // rule Hyc.l:184: {kw_while} :
{ push(Token::Specifier::KwWhile);}
            break;
          case 5: // rule Hyc.l:185: {kw_if} :
{ push(Token::Specifier::KwIf);}
            break;
          case 6: // rule Hyc.l:186: {kw_elif} :
{ push(Token::Specifier::KwElif);}
            break;
          case 7: // rule Hyc.l:187: {kw_else} :
{ push(Token::Specifier::KwElse);}
            break;
          case 8: // rule Hyc.l:188: {kw_struct} :
{ push(Token::Specifier::KwStruct);}
            break;
          case 9: // rule Hyc.l:189: {kw_continue} :
{ push(Token::Specifier::KwContinue);}
            break;
          case 10: // rule Hyc.l:190: {kw_fptr} :
{ push(Token::Specifier::KwFptr);}
            break;
          case 11: // rule Hyc.l:191: {kw_as} :
{ push(Token::Specifier::KwAs);}
            break;
          case 12: // rule Hyc.l:192: {kw_throw} :
{ PUSH(KwThrow);}
            break;
          case 13: // rule Hyc.l:193: {kw_union} :
{ PUSH(KwUnion);}
            break;
          case 14: // rule Hyc.l:194: {kw_namespace} :
{PUSH(KwNamespace);}
            break;
          case 15: // rule Hyc.l:195: {kw_match} :
{PUSH(KwMatch);}
            break;
          case 16: // rule Hyc.l:196: {kw_case} :
{PUSH(KwCase);}
            break;
          case 17: // rule Hyc.l:197: {kw_operator} :
{PUSH(KwOperator);}
            break;
          case 18: // rule Hyc.l:198: {kw_auto} :
{PUSH(KwAuto);}
            break;
          case 19: // rule Hyc.l:199: {double_colon} :
{ PUSH(DoubleColon);}
            break;
          case 20: // rule Hyc.l:200: {double_plus} :
{ PUSH(DoublePlus);}
            break;
          case 21: // rule Hyc.l:201: {double_minus} :
{ PUSH(DoubleMinus);}
            break;
          case 22: // rule Hyc.l:202: {ex_mark} :
{ PUSH(ExclMark);}
            break;
          case 23: // rule Hyc.l:203: {tilde} :
{ PUSH(Tilde);}
            break;
          case 24: // rule Hyc.l:204: {gen_fcall_open} :
{ PUSH(GenFCallOpen);}
            break;
          case 25: // rule Hyc.l:205: {gen_fcall_close} :
{PUSH(GenFCallClose);}
            break;
          case 26: // rule Hyc.l:206: {amp} :
{ PUSH(Ampersand);}
            break;
          case 27: // rule Hyc.l:207: {perc} :
{ PUSH(Percent);}
            break;
          case 28: // rule Hyc.l:208: {sr} :
{ PUSH(ShiftRight);}
            break;
          case 29: // rule Hyc.l:209: {sl} :
{ PUSH(ShiftLeft);}
            break;
          case 30: // rule Hyc.l:210: {thrway} :
{ PUSH(ThreeWay);}
            break;
          case 31: // rule Hyc.l:211: {lessEql} :
{ PUSH(LessEql);}
            break;
          case 32: // rule Hyc.l:212: {grEql} :
{ PUSH(GreaterEql);}
            break;
          case 33: // rule Hyc.l:213: {double_eql} :
{ PUSH(DoubleEqual);}
            break;
          case 34: // rule Hyc.l:214: {not_equal} :
{ PUSH(NotEqual);}
            break;
          case 35: // rule Hyc.l:215: {caret} :
{ PUSH(Caret);}
            break;
          case 36: // rule Hyc.l:216: {or} :
{ PUSH(Or);}
            break;
          case 37: // rule Hyc.l:217: {array_start} :
{ PUSH(ArrayStart);}
            break;
          case 38: // rule Hyc.l:218: {array_end} :
{ PUSH(ArrayEnd);}
            break;
          case 39: // rule Hyc.l:219: {hashtag} :
{ PUSH(Hashtag);}
            break;
          case 40: // rule Hyc.l:220: {double_amp} :
{ PUSH(DoubleAmpersand);}
            break;
          case 41: // rule Hyc.l:221: {double_or} :
{ PUSH(DoubleOr);}
            break;
          case 42: // rule Hyc.l:222: {questionmark} :
{ PUSH(QuestionMark);}
            break;
          case 43: // rule Hyc.l:223: {plus_eql} :
{ PUSH(PlusEqual);}
            break;
          case 44: // rule Hyc.l:224: {minus_eql} :
{ PUSH(MinusEqual);}
            break;
          case 45: // rule Hyc.l:225: {asterix_eql} :
{ PUSH(AsterixEqual);}
            break;
          case 46: // rule Hyc.l:226: {slash_eql} :
{ PUSH(SlashEqual);}
            break;
          case 47: // rule Hyc.l:227: {percent_equal} :
{ PUSH(PercentEqual);}
            break;
          case 48: // rule Hyc.l:228: {sl_eql} :
{ PUSH(SlEqual);}
            break;
          case 49: // rule Hyc.l:229: {sr_eql} :
{ PUSH(SrEqual);}
            break;
          case 50: // rule Hyc.l:230: {amp_eql} :
{ PUSH(AmpersandEqual);}
            break;
          case 51: // rule Hyc.l:231: {caret_eql} :
{ PUSH(CaretEqual);}
            break;
          case 52: // rule Hyc.l:232: {or_eql} :
{ PUSH(OrEqual);}
            break;
          case 53: // rule Hyc.l:233: {dot} :
{ PUSH(Dot);}
            break;
          case 54: // rule Hyc.l:234: {mem_acc} :
{ PUSH(MemAccess);}
            break;
          case 55: // rule Hyc.l:235: {comma} :
{ push(Token::Specifier::Comma);}
            break;
          case 56: // rule Hyc.l:236: {rparen_l} :
{ push(Token::Specifier::RParenL);}
            break;
          case 57: // rule Hyc.l:237: {rparen_r} :
{ push(Token::Specifier::RParenR);}
            break;
          case 58: // rule Hyc.l:238: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 59: // rule Hyc.l:239: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 60: // rule Hyc.l:240: {quad} :
{ push(Token::Specifier::Quad); }
            break;
          case 61: // rule Hyc.l:241: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 62: // rule Hyc.l:242: {int_} :
{ push(Token::Specifier::Int);}
            break;
          case 63: // rule Hyc.l:243: {uint} :
{ push(Token::Specifier::UInt);}
            break;
          case 64: // rule Hyc.l:244: {half} :
{ push(Token::Specifier::Half);}
            break;
          case 65: // rule Hyc.l:245: {uhalf} :
{ push(Token::Specifier::UHalf);}
            break;
          case 66: // rule Hyc.l:246: {char} :
{ push(Token::Specifier::Char);}
            break;
          case 67: // rule Hyc.l:247: {uchar} :
{ push(Token::Specifier::UChar);}
            break;
          case 68: // rule Hyc.l:248: {short} :
{ push(Token::Specifier::Short);}
            break;
          case 69: // rule Hyc.l:249: {ushort} :
{ push(Token::Specifier::UShort);}
            break;
          case 70: // rule Hyc.l:250: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 71: // rule Hyc.l:251: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 72: // rule Hyc.l:252: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 73: // rule Hyc.l:253: {decl_cpy} :
{ push(Token::Specifier::DeclCpy); }
            break;
          case 74: // rule Hyc.l:254: {colon} :
{ push(Token::Specifier::Colon); }
            break;
          case 75: // rule Hyc.l:255: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 76: // rule Hyc.l:256: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 77: // rule Hyc.l:257: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 78: // rule Hyc.l:258: {brace_l} :
{ push(Token::Specifier::BraceL); }
            break;
          case 79: // rule Hyc.l:259: {brace_r} :
{ push(Token::Specifier::BraceR); }
            break;
          case 80: // rule Hyc.l:260: {bracket_r} :
{ push(Token::Specifier::BracketR); }
            break;
          case 81: // rule Hyc.l:261: {bracket_l} :
{ push(Token::Specifier::BracketL);}
            break;
          case 82: // rule Hyc.l:262: {less} :
{ push(Token::Specifier::Less); }
            break;
          case 83: // rule Hyc.l:263: {greater} :
{ push(Token::Specifier::Greater); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '~') goto S156;
  if (c1 == '}') goto S239;
  if (c1 == '|') goto S175;
  if (c1 == '{') goto S237;
  if (c1 == 'w') goto S61;
  if (c1 == 'u') goto S112;
  if (c1 == 't') goto S105;
  if (c1 == 's') goto S82;
  if (c1 == 'r') goto S46;
  if (c1 == 'o') goto S133;
  if (c1 == 'n') goto S119;
  if (c1 == 'm') goto S126;
  if (c1 == 'i') goto S68;
  if (c1 == 'f') goto S53;
  if (c1 == 'e') goto S75;
  if (c1 == 'c') goto S89;
  if ('b' <= c1 && c1 <= 'z') goto S229;
  if (c1 == 'a') goto S97;
  if (c1 == '_') goto S229;
  if (c1 == '^') goto S186;
  if (c1 == ']') goto S241;
  if (c1 == '[') goto S189;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if (c1 == '?') goto S194;
  if (c1 == '>') goto S180;
  if (c1 == '=') goto S183;
  if (c1 == '<') goto S158;
  if (c1 == ';') goto S235;
  if (c1 == ':') goto S140;
  if ('1' <= c1 && c1 <= '9') goto S220;
  if (c1 == '0') goto S208;
  if (c1 == '/') goto S199;
  if (c1 == '.') goto S163;
  if (c1 == '-') goto S148;
  if (c1 == ',') goto S202;
  if (c1 == '+') goto S144;
  if (c1 == '*') goto S196;
  if (c1 == ')') goto S206;
  if (c1 == '(') goto S204;
  if (c1 == '&') goto S168;
  if (c1 == '%') goto S172;
  if (c1 == '#') goto S192;
  if (c1 == '!') goto S153;
  if (c1 == ' ') goto S243;
  if ('\t' <= c1 && c1 <= '\r') goto S243;
  return m.FSM_HALT(c1);

S46:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S247;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S53:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S261;
  if (c1 == 'o') goto S254;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S61:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S268;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S68:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S275;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S75:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S281;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S82:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S289;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S89:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S296;
  if ('b' <= c1 && c1 <= 'z') goto S229;
  if (c1 == 'a') goto S303;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S97:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S316;
  if (c1 == 's') goto S310;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S105:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S323;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S112:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S330;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S119:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S229;
  if (c1 == 'a') goto S337;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S126:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S229;
  if (c1 == 'a') goto S344;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S133:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S351;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S140:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S360;
  if (c1 == ':') goto S358;
  return m.FSM_HALT(c1);

S144:
  m.FSM_TAKE(61);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S364;
  if (c1 == '+') goto S362;
  return m.FSM_HALT(c1);

S148:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S370;
  if (c1 == '=') goto S368;
  if (c1 == '-') goto S366;
  return m.FSM_HALT(c1);

S153:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S372;
  return m.FSM_HALT(c1);

S156:
  m.FSM_TAKE(23);
  return m.FSM_HALT();

S158:
  m.FSM_TAKE(82);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S376;
  if (c1 == '=') goto S379;
  if (c1 == '.') goto S374;
  return m.FSM_HALT(c1);

S163:
  m.FSM_TAKE(53);
  c1 = m.FSM_CHAR();
  if (c1 == ']') goto S384;
  if (c1 == '>') goto S382;
  if ('0' <= c1 && c1 <= '9') goto S386;
  return m.FSM_HALT(c1);

S168:
  m.FSM_TAKE(26);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S395;
  if (c1 == '&') goto S393;
  return m.FSM_HALT(c1);

S172:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S397;
  return m.FSM_HALT(c1);

S175:
  m.FSM_TAKE(36);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S402;
  if (c1 == '>') goto S399;
  if (c1 == '=') goto S404;
  return m.FSM_HALT(c1);

S180:
  m.FSM_TAKE(83);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S406;
  return m.FSM_HALT(c1);

S183:
  m.FSM_TAKE(75);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S408;
  return m.FSM_HALT(c1);

S186:
  m.FSM_TAKE(35);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S410;
  return m.FSM_HALT(c1);

S189:
  m.FSM_TAKE(81);
  c1 = m.FSM_CHAR();
  if (c1 == '.') goto S412;
  return m.FSM_HALT(c1);

S192:
  m.FSM_TAKE(39);
  return m.FSM_HALT();

S194:
  m.FSM_TAKE(42);
  return m.FSM_HALT();

S196:
  m.FSM_TAKE(71);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S414;
  return m.FSM_HALT(c1);

S199:
  m.FSM_TAKE(72);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S416;
  return m.FSM_HALT(c1);

S202:
  m.FSM_TAKE(55);
  return m.FSM_HALT();

S204:
  m.FSM_TAKE(56);
  return m.FSM_HALT();

S206:
  m.FSM_TAKE(57);
  return m.FSM_HALT();

S208:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S420;
  if (c1 == 'u') goto S429;
  if (c1 == 's') goto S438;
  if (c1 == 'i') goto S453;
  if (c1 == 'h') goto S434;
  if (c1 == 'c') goto S436;
  if (c1 == 'b') goto S427;
  if ('8' <= c1 && c1 <= '9') goto S440;
  if ('0' <= c1 && c1 <= '7') goto S443;
  if (c1 == '.') goto S418;
  return m.FSM_HALT(c1);

S220:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S429;
  if (c1 == 's') goto S438;
  if (c1 == 'i') goto S453;
  if (c1 == 'h') goto S434;
  if (c1 == 'c') goto S436;
  if ('0' <= c1 && c1 <= '9') goto S220;
  if (c1 == '.') goto S418;
  return m.FSM_HALT(c1);

S229:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S235:
  m.FSM_TAKE(77);
  return m.FSM_HALT();

S237:
  m.FSM_TAKE(78);
  return m.FSM_HALT();

S239:
  m.FSM_TAKE(79);
  return m.FSM_HALT();

S241:
  m.FSM_TAKE(80);
  return m.FSM_HALT();

S243:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S243;
  if ('\t' <= c1 && c1 <= '\r') goto S243;
  return m.FSM_HALT(c1);

S247:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S459;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S254:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S466;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S261:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S472;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S268:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S479;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S275:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S281:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S493;
  if (c1 == 'i') goto S486;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S289:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S500;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S296:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S507;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S303:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S514;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S310:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S316:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S521;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S323:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S528;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S330:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S535;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S337:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'm') goto S542;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S344:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S549;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S351:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S556;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S358:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S360:
  m.FSM_TAKE(73);
  return m.FSM_HALT();

S362:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S364:
  m.FSM_TAKE(43);
  return m.FSM_HALT();

S366:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S368:
  m.FSM_TAKE(44);
  return m.FSM_HALT();

S370:
  m.FSM_TAKE(54);
  return m.FSM_HALT();

S372:
  m.FSM_TAKE(34);
  return m.FSM_HALT();

S374:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S376:
  m.FSM_TAKE(29);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S563;
  return m.FSM_HALT(c1);

S379:
  m.FSM_TAKE(31);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S565;
  return m.FSM_HALT(c1);

S382:
  m.FSM_TAKE(25);
  return m.FSM_HALT();

S384:
  m.FSM_TAKE(38);
  return m.FSM_HALT();

S386:
  m.FSM_TAKE(59);
  c1 = m.FSM_CHAR();
  if (c1 == 'q') goto S569;
  if (c1 == 'f') goto S567;
  if (c1 == 'e') goto S571;
  if (c1 == 'E') goto S571;
  if ('0' <= c1 && c1 <= '9') goto S386;
  return m.FSM_HALT(c1);

S393:
  m.FSM_TAKE(40);
  return m.FSM_HALT();

S395:
  m.FSM_TAKE(50);
  return m.FSM_HALT();

S397:
  m.FSM_TAKE(47);
  return m.FSM_HALT();

S399:
  m.FSM_TAKE(28);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S574;
  return m.FSM_HALT(c1);

S402:
  m.FSM_TAKE(41);
  return m.FSM_HALT();

S404:
  m.FSM_TAKE(52);
  return m.FSM_HALT();

S406:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S408:
  m.FSM_TAKE(33);
  return m.FSM_HALT();

S410:
  m.FSM_TAKE(51);
  return m.FSM_HALT();

S412:
  m.FSM_TAKE(37);
  return m.FSM_HALT();

S414:
  m.FSM_TAKE(45);
  return m.FSM_HALT();

S416:
  m.FSM_TAKE(46);
  return m.FSM_HALT();

S418:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S386;
  return m.FSM_HALT(c1);

S420:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S576;
  if (c1 == 't') goto S576;
  if (c1 == 'i') goto S576;
  if (c1 == 'g') goto S576;
  if (c1 == 'd') goto S576;
  if (c1 == ':') goto S576;
  return m.FSM_HALT(c1);

S427:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S587;
  return m.FSM_HALT(c1);

S429:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S601;
  if (c1 == 'i') goto S595;
  if (c1 == 'h') goto S597;
  if (c1 == 'c') goto S599;
  return m.FSM_HALT(c1);

S434:
  m.FSM_TAKE(64);
  return m.FSM_HALT();

S436:
  m.FSM_TAKE(66);
  return m.FSM_HALT();

S438:
  m.FSM_TAKE(68);
  return m.FSM_HALT();

S440:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S440;
  if (c1 == '.') goto S418;
  return m.FSM_HALT(c1);

S443:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S429;
  if (c1 == 's') goto S438;
  if (c1 == 'i') goto S453;
  if (c1 == 'h') goto S434;
  if (c1 == 'c') goto S436;
  if ('8' <= c1 && c1 <= '9') goto S440;
  if ('0' <= c1 && c1 <= '7') goto S443;
  if (c1 == '.') goto S418;
  return m.FSM_HALT(c1);

S453:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S429;
  if (c1 == 's') goto S438;
  if (c1 == 'h') goto S434;
  if (c1 == 'c') goto S436;
  return m.FSM_HALT(c1);

S459:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S603;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S466:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S472:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S610;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S479:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S616;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S486:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S623;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S493:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S629;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S500:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S635;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S507:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S642;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S514:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S649;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S521:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S655;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S528:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S661;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S535:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S668;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S542:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S675;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S549:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S682;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S556:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S689;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S563:
  m.FSM_TAKE(48);
  return m.FSM_HALT();

S565:
  m.FSM_TAKE(30);
  return m.FSM_HALT();

S567:
  m.FSM_TAKE(58);
  return m.FSM_HALT();

S569:
  m.FSM_TAKE(60);
  return m.FSM_HALT();

S571:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S696;
  if (c1 == '+') goto S696;
  return m.FSM_HALT(c1);

S574:
  m.FSM_TAKE(49);
  return m.FSM_HALT();

S576:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S576;
  if (c1 == 'u') goto S429;
  if (c1 == 't') goto S576;
  if (c1 == 's') goto S438;
  if (c1 == 'h') goto S434;
  if ('g' <= c1 && c1 <= 'i') goto S576;
  if (c1 == 'd') goto S576;
  if (c1 == 'c') goto S436;
  if (c1 == ':') goto S576;
  return m.FSM_HALT(c1);

S587:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S429;
  if (c1 == 's') goto S438;
  if (c1 == 'i') goto S453;
  if (c1 == 'h') goto S434;
  if (c1 == 'c') goto S436;
  if ('0' <= c1 && c1 <= '1') goto S587;
  return m.FSM_HALT(c1);

S595:
  m.FSM_TAKE(63);
  return m.FSM_HALT();

S597:
  m.FSM_TAKE(65);
  return m.FSM_HALT();

S599:
  m.FSM_TAKE(67);
  return m.FSM_HALT();

S601:
  m.FSM_TAKE(69);
  return m.FSM_HALT();

S603:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S698;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S610:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S616:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S705;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S623:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S629:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S635:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S711;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S642:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S718;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S649:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S655:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S661:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'w') goto S725;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S668:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S731;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S675:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S737;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S682:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S744;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S689:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S229;
  if (c1 == 'a') goto S750;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S696:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S757;
  return m.FSM_HALT(c1);

S698:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S762;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S705:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S711:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S768;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S718:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S774;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S725:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S731:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S737:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S781;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S744:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S750:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S788;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S757:
  m.FSM_TAKE(59);
  c1 = m.FSM_CHAR();
  if (c1 == 'q') goto S569;
  if (c1 == 'f') goto S567;
  if ('0' <= c1 && c1 <= '9') goto S757;
  return m.FSM_HALT(c1);

S762:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S768:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S774:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S795;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S781:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S229;
  if (c1 == 'a') goto S802;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S788:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S809;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S795:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S816;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S802:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S822;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S809:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S829;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S816:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S822:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S835;
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S829:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);

S835:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S229;
  if (c1 == '_') goto S229;
  if ('A' <= c1 && c1 <= 'Z') goto S229;
  if ('0' <= c1 && c1 <= '9') goto S229;
  return m.FSM_HALT(c1);
}

