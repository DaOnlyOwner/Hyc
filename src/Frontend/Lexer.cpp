// ../src/Frontend/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Frontend/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Frontend/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>
#include <array>
#define PUSH(name) push(Token::Specifier::name)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   Token& eat()
   {
      Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   bool is_at(Token::Specifier spec, size_t amount) const
   {
	return spec == lookahead(1).type;
   }

   Token& lookahead(size_t amount)
   {
       auto minIndex = std::min(m_current_token + amount, m_tokens.size() - 1);
       return m_tokens[minIndex];
   }

   Token& match_token(Token::Specifier type)
   {
      Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is '{}'",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }

template<Token::Specifier... specs>
   Token& match_one_of()
   {
       Token& token = eat();
       // One of the arguments is the token type
       if (((token.type == specs) || ... ))
       {
           return token;
       }
       else
       {
           std::array<Token::Specifier, sizeof... (specs)> specs_ary = { specs... };
           std::string exp = "";
           for (auto& spec : specs_ary)
           {
               exp += fmt::format("{}, ", Token::Translate(spec));
           }
           auto descr = Error::FromToken(token);
           descr.Message = fmt::format("Expected one of '{}' but got '{}'", exp, Token::Translate(token.type));
           descr.Hint = fmt::format("The offending token is '{}'", token.text);
           Error::SyntacticalError(descr);
       }
   }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:169: \s+ :
            break;
          case 2: // rule Hyc.l:170: {kw_return} :
{ push(Token::Specifier::KwReturn);}
            break;
          case 3: // rule Hyc.l:171: {kw_for} :
{ push(Token::Specifier::KwFor);}
            break;
          case 4: // rule Hyc.l:172: {kw_while} :
{ push(Token::Specifier::KwWhile);}
            break;
          case 5: // rule Hyc.l:173: {kw_if} :
{ push(Token::Specifier::KwIf);}
            break;
          case 6: // rule Hyc.l:174: {kw_elif} :
{ push(Token::Specifier::KwElif);}
            break;
          case 7: // rule Hyc.l:175: {kw_else} :
{ push(Token::Specifier::KwElse);}
            break;
          case 8: // rule Hyc.l:176: {kw_struct} :
{ push(Token::Specifier::KwStruct);}
            break;
          case 9: // rule Hyc.l:177: {kw_continue} :
{ push(Token::Specifier::KwContinue);}
            break;
          case 10: // rule Hyc.l:178: {kw_fptr} :
{ push(Token::Specifier::KwFptr);}
            break;
          case 11: // rule Hyc.l:179: {kw_as} :
{ push(Token::Specifier::KwAs);}
            break;
          case 12: // rule Hyc.l:180: {kw_throw} :
{ PUSH(KwThrow);}
            break;
          case 13: // rule Hyc.l:181: {kw_union} :
{ PUSH(KwUnion);}
            break;
          case 14: // rule Hyc.l:182: {kw_namespace} :
{PUSH(KwNamespace);}
            break;
          case 15: // rule Hyc.l:183: {kw_match} :
{PUSH(KwMatch);}
            break;
          case 16: // rule Hyc.l:184: {kw_case} :
{PUSH(KwCase);}
            break;
          case 17: // rule Hyc.l:185: {kw_operator} :
{PUSH(KwOperator);}
            break;
          case 18: // rule Hyc.l:186: {kw_auto} :
{PUSH(KwAuto);}
            break;
          case 19: // rule Hyc.l:187: {double_colon} :
{ PUSH(DoubleColon);}
            break;
          case 20: // rule Hyc.l:188: {double_plus} :
{ PUSH(DoublePlus);}
            break;
          case 21: // rule Hyc.l:189: {double_minus} :
{ PUSH(DoubleMinus);}
            break;
          case 22: // rule Hyc.l:190: {ex_mark} :
{ PUSH(ExclMark);}
            break;
          case 23: // rule Hyc.l:191: {tilde} :
{ PUSH(Tilde);}
            break;
          case 24: // rule Hyc.l:192: {gen_fcall_open} :
{ PUSH(GenFCallOpen);}
            break;
          case 25: // rule Hyc.l:193: {gen_fcall_close} :
{PUSH(GenFCallClose);}
            break;
          case 26: // rule Hyc.l:194: {amp} :
{ PUSH(Ampersand);}
            break;
          case 27: // rule Hyc.l:195: {perc} :
{ PUSH(Percent);}
            break;
          case 28: // rule Hyc.l:196: {sr} :
{ PUSH(ShiftRight);}
            break;
          case 29: // rule Hyc.l:197: {sl} :
{ PUSH(ShiftLeft);}
            break;
          case 30: // rule Hyc.l:198: {thrway} :
{ PUSH(ThreeWay);}
            break;
          case 31: // rule Hyc.l:199: {lessEql} :
{ PUSH(LessEql);}
            break;
          case 32: // rule Hyc.l:200: {grEql} :
{ PUSH(GreaterEql);}
            break;
          case 33: // rule Hyc.l:201: {double_eql} :
{ PUSH(DoubleEqual);}
            break;
          case 34: // rule Hyc.l:202: {not_equal} :
{ PUSH(NotEqual);}
            break;
          case 35: // rule Hyc.l:203: {caret} :
{ PUSH(Caret);}
            break;
          case 36: // rule Hyc.l:204: {or} :
{ PUSH(Or);}
            break;
          case 37: // rule Hyc.l:205: {hashtag} :
{ PUSH(Hashtag);}
            break;
          case 38: // rule Hyc.l:206: {double_amp} :
{ PUSH(DoubleAmpersand);}
            break;
          case 39: // rule Hyc.l:207: {double_or} :
{ PUSH(DoubleOr);}
            break;
          case 40: // rule Hyc.l:208: {questionmark} :
{ PUSH(QuestionMark);}
            break;
          case 41: // rule Hyc.l:209: {plus_eql} :
{ PUSH(PlusEqual);}
            break;
          case 42: // rule Hyc.l:210: {minus_eql} :
{ PUSH(MinusEqual);}
            break;
          case 43: // rule Hyc.l:211: {asterix_eql} :
{ PUSH(AsterixEqual);}
            break;
          case 44: // rule Hyc.l:212: {slash_eql} :
{ PUSH(SlashEqual);}
            break;
          case 45: // rule Hyc.l:213: {percent_equal} :
{ PUSH(PercentEqual);}
            break;
          case 46: // rule Hyc.l:214: {sl_eql} :
{ PUSH(SlEqual);}
            break;
          case 47: // rule Hyc.l:215: {sr_eql} :
{ PUSH(SrEqual);}
            break;
          case 48: // rule Hyc.l:216: {amp_eql} :
{ PUSH(AmpersandEqual);}
            break;
          case 49: // rule Hyc.l:217: {caret_eql} :
{ PUSH(CaretEqual);}
            break;
          case 50: // rule Hyc.l:218: {or_eql} :
{ PUSH(OrEqual);}
            break;
          case 51: // rule Hyc.l:219: {dot} :
{ PUSH(Dot);}
            break;
          case 52: // rule Hyc.l:220: {mem_acc} :
{ PUSH(MemAccess);}
            break;
          case 53: // rule Hyc.l:221: {comma} :
{ push(Token::Specifier::Comma);}
            break;
          case 54: // rule Hyc.l:222: {rparen_l} :
{ push(Token::Specifier::RParenL);}
            break;
          case 55: // rule Hyc.l:223: {rparen_r} :
{ push(Token::Specifier::RParenR);}
            break;
          case 56: // rule Hyc.l:224: {integer} :
{ push(Token::Specifier::Integer); }
            break;
          case 57: // rule Hyc.l:225: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 58: // rule Hyc.l:226: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 59: // rule Hyc.l:227: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 60: // rule Hyc.l:228: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 61: // rule Hyc.l:229: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 62: // rule Hyc.l:230: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 63: // rule Hyc.l:231: {decl_cpy} :
{ push(Token::Specifier::DeclCpy); }
            break;
          case 64: // rule Hyc.l:232: {decl_mv} :
{ push(Token::Specifier::DeclMv);  }
            break;
          case 65: // rule Hyc.l:233: {colon} :
{ push(Token::Specifier::Colon); }
            break;
          case 66: // rule Hyc.l:234: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 67: // rule Hyc.l:235: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 68: // rule Hyc.l:236: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 69: // rule Hyc.l:237: {brace_l} :
{ push(Token::Specifier::BraceL); }
            break;
          case 70: // rule Hyc.l:238: {brace_r} :
{ push(Token::Specifier::BraceR); }
            break;
          case 71: // rule Hyc.l:239: {bracket_r} :
{ push(Token::Specifier::BracketR); }
            break;
          case 72: // rule Hyc.l:240: {bracket_l} :
{ push(Token::Specifier::BracketL);}
            break;
          case 73: // rule Hyc.l:241: {less} :
{ push(Token::Specifier::Less); }
            break;
          case 74: // rule Hyc.l:242: {greater} :
{ push(Token::Specifier::Greater); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '~') goto S157;
  if (c1 == '}') goto S226;
  if (c1 == '|') goto S175;
  if (c1 == '{') goto S224;
  if (c1 == 'w') goto S61;
  if (c1 == 'u') goto S112;
  if (c1 == 't') goto S105;
  if (c1 == 's') goto S82;
  if (c1 == 'r') goto S46;
  if (c1 == 'o') goto S133;
  if (c1 == 'n') goto S119;
  if (c1 == 'm') goto S126;
  if (c1 == 'i') goto S68;
  if (c1 == 'f') goto S53;
  if (c1 == 'e') goto S75;
  if (c1 == 'c') goto S89;
  if (c1 == 'a') goto S97;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if (c1 == '^') goto S186;
  if (c1 == ']') goto S228;
  if (c1 == '[') goto S230;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if (c1 == '?') goto S191;
  if (c1 == '>') goto S180;
  if (c1 == '=') goto S183;
  if (c1 == '<') goto S159;
  if (c1 == ';') goto S222;
  if (c1 == ':') goto S140;
  if ('1' <= c1 && c1 <= '9') goto S212;
  if (c1 == '0') goto S205;
  if (c1 == '/') goto S196;
  if (c1 == '.') goto S164;
  if (c1 == '-') goto S149;
  if (c1 == ',') goto S199;
  if (c1 == '+') goto S145;
  if (c1 == '*') goto S193;
  if (c1 == ')') goto S203;
  if (c1 == '(') goto S201;
  if (c1 == '\'') goto S216;
  if (c1 == '&') goto S168;
  if (c1 == '%') goto S172;
  if (c1 == '#') goto S189;
  if (c1 == '!') goto S154;
  if (c1 == ' ') goto S232;
  if ('\t' <= c1 && c1 <= '\r') goto S232;
  return m.FSM_HALT(c1);

S46:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S236;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S53:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S250;
  if (c1 == 'o') goto S243;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S61:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S257;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S68:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S264;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S75:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S270;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S82:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S278;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S89:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S285;
  if (c1 == 'a') goto S292;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S97:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S305;
  if (c1 == 's') goto S299;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S105:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S312;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S112:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S319;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S119:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S326;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S126:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S333;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S133:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S340;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S140:
  m.FSM_TAKE(65);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S349;
  if (c1 == ':') goto S347;
  if (c1 == '#') goto S351;
  return m.FSM_HALT(c1);

S145:
  m.FSM_TAKE(59);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S355;
  if (c1 == '+') goto S353;
  return m.FSM_HALT(c1);

S149:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S361;
  if (c1 == '=') goto S359;
  if (c1 == '-') goto S357;
  return m.FSM_HALT(c1);

S154:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S363;
  return m.FSM_HALT(c1);

S157:
  m.FSM_TAKE(23);
  return m.FSM_HALT();

S159:
  m.FSM_TAKE(73);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S367;
  if (c1 == '=') goto S370;
  if (c1 == '.') goto S365;
  return m.FSM_HALT(c1);

S164:
  m.FSM_TAKE(51);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S373;
  if ('0' <= c1 && c1 <= '9') goto S375;
  return m.FSM_HALT(c1);

S168:
  m.FSM_TAKE(26);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S383;
  if (c1 == '&') goto S381;
  return m.FSM_HALT(c1);

S172:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S385;
  return m.FSM_HALT(c1);

S175:
  m.FSM_TAKE(36);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S390;
  if (c1 == '>') goto S387;
  if (c1 == '=') goto S392;
  return m.FSM_HALT(c1);

S180:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S394;
  return m.FSM_HALT(c1);

S183:
  m.FSM_TAKE(66);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S396;
  return m.FSM_HALT(c1);

S186:
  m.FSM_TAKE(35);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S398;
  return m.FSM_HALT(c1);

S189:
  m.FSM_TAKE(37);
  return m.FSM_HALT();

S191:
  m.FSM_TAKE(40);
  return m.FSM_HALT();

S193:
  m.FSM_TAKE(61);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S400;
  return m.FSM_HALT(c1);

S196:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S402;
  return m.FSM_HALT(c1);

S199:
  m.FSM_TAKE(53);
  return m.FSM_HALT();

S201:
  m.FSM_TAKE(54);
  return m.FSM_HALT();

S203:
  m.FSM_TAKE(55);
  return m.FSM_HALT();

S205:
  m.FSM_TAKE(56);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S404;
  if (c1 == 'b') goto S411;
  if ('8' <= c1 && c1 <= '9') goto S420;
  if ('0' <= c1 && c1 <= '7') goto S415;
  if (c1 == '.') goto S413;
  return m.FSM_HALT(c1);

S212:
  m.FSM_TAKE(56);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S212;
  if (c1 == '.') goto S413;
  return m.FSM_HALT(c1);

S216:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S222:
  m.FSM_TAKE(68);
  return m.FSM_HALT();

S224:
  m.FSM_TAKE(69);
  return m.FSM_HALT();

S226:
  m.FSM_TAKE(70);
  return m.FSM_HALT();

S228:
  m.FSM_TAKE(71);
  return m.FSM_HALT();

S230:
  m.FSM_TAKE(72);
  return m.FSM_HALT();

S232:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S232;
  if ('\t' <= c1 && c1 <= '\r') goto S232;
  return m.FSM_HALT(c1);

S236:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S423;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S243:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S430;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S250:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S436;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S257:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S443;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S264:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S270:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S457;
  if (c1 == 'i') goto S450;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S278:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S464;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S285:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S471;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S292:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S478;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S299:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S305:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S485;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S312:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S492;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S319:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S499;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S326:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'm') goto S506;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S333:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S513;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S340:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S520;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S347:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S349:
  m.FSM_TAKE(63);
  return m.FSM_HALT();

S351:
  m.FSM_TAKE(64);
  return m.FSM_HALT();

S353:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S355:
  m.FSM_TAKE(41);
  return m.FSM_HALT();

S357:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S359:
  m.FSM_TAKE(42);
  return m.FSM_HALT();

S361:
  m.FSM_TAKE(52);
  return m.FSM_HALT();

S363:
  m.FSM_TAKE(34);
  return m.FSM_HALT();

S365:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S367:
  m.FSM_TAKE(29);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S527;
  return m.FSM_HALT(c1);

S370:
  m.FSM_TAKE(31);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S529;
  return m.FSM_HALT(c1);

S373:
  m.FSM_TAKE(25);
  return m.FSM_HALT();

S375:
  m.FSM_TAKE(58);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S531;
  if (c1 == 'e') goto S533;
  if (c1 == 'E') goto S533;
  if ('0' <= c1 && c1 <= '9') goto S375;
  return m.FSM_HALT(c1);

S381:
  m.FSM_TAKE(38);
  return m.FSM_HALT();

S383:
  m.FSM_TAKE(48);
  return m.FSM_HALT();

S385:
  m.FSM_TAKE(45);
  return m.FSM_HALT();

S387:
  m.FSM_TAKE(28);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S536;
  return m.FSM_HALT(c1);

S390:
  m.FSM_TAKE(39);
  return m.FSM_HALT();

S392:
  m.FSM_TAKE(50);
  return m.FSM_HALT();

S394:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S396:
  m.FSM_TAKE(33);
  return m.FSM_HALT();

S398:
  m.FSM_TAKE(49);
  return m.FSM_HALT();

S400:
  m.FSM_TAKE(43);
  return m.FSM_HALT();

S402:
  m.FSM_TAKE(44);
  return m.FSM_HALT();

S404:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S538;
  if (c1 == 't') goto S538;
  if (c1 == 'i') goto S538;
  if (c1 == 'g') goto S538;
  if (c1 == 'd') goto S538;
  if (c1 == ':') goto S538;
  return m.FSM_HALT(c1);

S411:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S546;
  return m.FSM_HALT(c1);

S413:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S375;
  return m.FSM_HALT(c1);

S415:
  m.FSM_TAKE(56);
  c1 = m.FSM_CHAR();
  if ('8' <= c1 && c1 <= '9') goto S420;
  if ('0' <= c1 && c1 <= '7') goto S415;
  if (c1 == '.') goto S413;
  return m.FSM_HALT(c1);

S420:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S420;
  if (c1 == '.') goto S413;
  return m.FSM_HALT(c1);

S423:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S549;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S430:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S436:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S556;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S443:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S562;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S450:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S569;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S457:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S575;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S464:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S581;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S471:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S588;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S478:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S595;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S485:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S601;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S492:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S607;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S499:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S614;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S506:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S621;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S513:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S628;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S520:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S635;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S527:
  m.FSM_TAKE(46);
  return m.FSM_HALT();

S529:
  m.FSM_TAKE(30);
  return m.FSM_HALT();

S531:
  m.FSM_TAKE(57);
  return m.FSM_HALT();

S533:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S642;
  if (c1 == '+') goto S642;
  return m.FSM_HALT(c1);

S536:
  m.FSM_TAKE(47);
  return m.FSM_HALT();

S538:
  m.FSM_TAKE(56);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S538;
  if (c1 == 't') goto S538;
  if (c1 == 'i') goto S538;
  if (c1 == 'g') goto S538;
  if (c1 == 'd') goto S538;
  if (c1 == ':') goto S538;
  return m.FSM_HALT(c1);

S546:
  m.FSM_TAKE(56);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S546;
  return m.FSM_HALT(c1);

S549:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S644;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S556:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S562:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S651;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S569:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S575:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S581:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S657;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S588:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S664;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S595:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S601:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S607:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'w') goto S671;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S614:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S677;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S621:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S683;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S628:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S690;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S635:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S696;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S642:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S703;
  return m.FSM_HALT(c1);

S644:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S707;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S651:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S657:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S713;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S664:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S719;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S671:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S677:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S683:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S726;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S690:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S696:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S733;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S703:
  m.FSM_TAKE(58);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S531;
  if ('0' <= c1 && c1 <= '9') goto S703;
  return m.FSM_HALT(c1);

S707:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S713:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S719:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S740;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S726:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S747;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S733:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S754;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S740:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S761;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S747:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S767;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S754:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S774;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S761:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S767:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S780;
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S774:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);

S780:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('_' <= c1 && c1 <= 'z') goto S216;
  if ('A' <= c1 && c1 <= 'Z') goto S216;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '\'') goto S216;
  return m.FSM_HALT(c1);
}

