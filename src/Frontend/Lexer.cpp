// ../src/Frontend/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Frontend/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Frontend/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>
#include <array>
#define PUSH(name) push(Token::Specifier::name)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   typedef size_t TokenPos;
   TokenPos get_tk_pos(){return m_current_token;}
   void goto_tk_pos(TokenPos tp) {m_current_token = tp;}
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   Token& eat()
   {
      Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   bool is_at(Token::Specifier spec, size_t amount) const
   {
	return spec == lookahead(1).type;
   }

   Token& lookahead(size_t amount)
   {
       auto minIndex = std::min(m_current_token + amount, m_tokens.size() - 1);
       return m_tokens[minIndex];
   }

   Token& match_token(Token::Specifier type)
   {
      Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is '{}'",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }

template<Token::Specifier... specs>
   Token& match_one_of()
   {
       Token& token = eat();
       // One of the arguments is the token type
       if (((token.type == specs) || ... ))
       {
           return token;
       }
       else
       {
           std::array<Token::Specifier, sizeof... (specs)> specs_ary = { specs... };
           std::string exp = "";
           for (auto& spec : specs_ary)
           {
               exp += fmt::format("{}, ", Token::Translate(spec));
           }
           auto descr = Error::FromToken(token);
           descr.Message = fmt::format("Expected one of '{}' but got '{}'", exp, Token::Translate(token.type));
           descr.Hint = fmt::format("The offending token is '{}'", token.text);
           Error::SyntacticalError(descr);
       }
   }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:187: \s+ :
            break;
          case 2: // rule Hyc.l:188: "//"[^\n]* :
            break;
          case 3: // rule Hyc.l:189: [$][^$]*[$] :
            break;
          case 4: // rule Hyc.l:190: {kw_return} :
{ push(Token::Specifier::KwReturn);}
            break;
          case 5: // rule Hyc.l:191: {kw_for} :
{ push(Token::Specifier::KwFor);}
            break;
          case 6: // rule Hyc.l:192: {kw_while} :
{ push(Token::Specifier::KwWhile);}
            break;
          case 7: // rule Hyc.l:193: {kw_if} :
{ push(Token::Specifier::KwIf);}
            break;
          case 8: // rule Hyc.l:194: {kw_elif} :
{ push(Token::Specifier::KwElif);}
            break;
          case 9: // rule Hyc.l:195: {kw_else} :
{ push(Token::Specifier::KwElse);}
            break;
          case 10: // rule Hyc.l:196: {kw_struct} :
{ push(Token::Specifier::KwStruct);}
            break;
          case 11: // rule Hyc.l:197: {kw_continue} :
{ push(Token::Specifier::KwContinue);}
            break;
          case 12: // rule Hyc.l:198: {kw_fptr} :
{ push(Token::Specifier::KwFptr);}
            break;
          case 13: // rule Hyc.l:199: {kw_as} :
{ push(Token::Specifier::KwAs);}
            break;
          case 14: // rule Hyc.l:200: {kw_throw} :
{ PUSH(KwThrow);}
            break;
          case 15: // rule Hyc.l:201: {kw_union} :
{ PUSH(KwUnion);}
            break;
          case 16: // rule Hyc.l:202: {kw_namespace} :
{PUSH(KwNamespace);}
            break;
          case 17: // rule Hyc.l:203: {kw_match} :
{PUSH(KwMatch);}
            break;
          case 18: // rule Hyc.l:204: {kw_case} :
{PUSH(KwCase);}
            break;
          case 19: // rule Hyc.l:205: {kw_operator} :
{PUSH(KwOperator);}
            break;
          case 20: // rule Hyc.l:206: {kw_auto} :
{PUSH(KwAuto);}
            break;
          case 21: // rule Hyc.l:207: {kw_del} :
{PUSH(KwDel);}
            break;
          case 22: // rule Hyc.l:208: {kw_moved} :
{PUSH(KwMoved);}
            break;
          case 23: // rule Hyc.l:209: {double_colon} :
{ PUSH(DoubleColon);}
            break;
          case 24: // rule Hyc.l:210: {dot_comma} :
{ PUSH(DotComma);}
            break;
          case 25: // rule Hyc.l:211: {mem_acc_comma} :
{ PUSH(MemAccComma);}
            break;
          case 26: // rule Hyc.l:212: {double_plus} :
{ PUSH(DoublePlus);}
            break;
          case 27: // rule Hyc.l:213: {double_minus} :
{ PUSH(DoubleMinus);}
            break;
          case 28: // rule Hyc.l:214: {ex_mark} :
{ PUSH(ExclMark);}
            break;
          case 29: // rule Hyc.l:215: {double_qm} :
{ PUSH(DoubleQM);}
            break;
          case 30: // rule Hyc.l:216: {double_em} :
{ PUSH(DoubleEM);}
            break;
          case 31: // rule Hyc.l:217: {tilde} :
{ PUSH(Tilde);}
            break;
          case 32: // rule Hyc.l:218: {gen_fcall_open} :
{ PUSH(GenFCallOpen);}
            break;
          case 33: // rule Hyc.l:219: {gen_fcall_close} :
{PUSH(GenFCallClose);}
            break;
          case 34: // rule Hyc.l:220: {amp} :
{ PUSH(Ampersand);}
            break;
          case 35: // rule Hyc.l:221: {perc} :
{ PUSH(Percent);}
            break;
          case 36: // rule Hyc.l:222: {sr} :
{ PUSH(ShiftRight);}
            break;
          case 37: // rule Hyc.l:223: {sl} :
{ PUSH(ShiftLeft);}
            break;
          case 38: // rule Hyc.l:224: {thrway} :
{ PUSH(ThreeWay);}
            break;
          case 39: // rule Hyc.l:225: {lessEql} :
{ PUSH(LessEql);}
            break;
          case 40: // rule Hyc.l:226: {grEql} :
{ PUSH(GreaterEql);}
            break;
          case 41: // rule Hyc.l:227: {double_eql} :
{ PUSH(DoubleEqual);}
            break;
          case 42: // rule Hyc.l:228: {not_equal} :
{ PUSH(NotEqual);}
            break;
          case 43: // rule Hyc.l:229: {caret} :
{ PUSH(Caret);}
            break;
          case 44: // rule Hyc.l:230: {or} :
{ PUSH(Or);}
            break;
          case 45: // rule Hyc.l:231: {array_start} :
{ PUSH(ArrayStart);}
            break;
          case 46: // rule Hyc.l:232: {array_end} :
{ PUSH(ArrayEnd);}
            break;
          case 47: // rule Hyc.l:233: {hashtag} :
{ PUSH(Hashtag);}
            break;
          case 48: // rule Hyc.l:234: {double_amp} :
{ PUSH(DoubleAmpersand);}
            break;
          case 49: // rule Hyc.l:235: {double_or} :
{ PUSH(DoubleOr);}
            break;
          case 50: // rule Hyc.l:236: {questionmark} :
{ PUSH(QuestionMark);}
            break;
          case 51: // rule Hyc.l:237: {plus_eql} :
{ PUSH(PlusEqual);}
            break;
          case 52: // rule Hyc.l:238: {minus_eql} :
{ PUSH(MinusEqual);}
            break;
          case 53: // rule Hyc.l:239: {asterix_eql} :
{ PUSH(AsterixEqual);}
            break;
          case 54: // rule Hyc.l:240: {slash_eql} :
{ PUSH(SlashEqual);}
            break;
          case 55: // rule Hyc.l:241: {percent_equal} :
{ PUSH(PercentEqual);}
            break;
          case 56: // rule Hyc.l:242: {sl_eql} :
{ PUSH(SlEqual);}
            break;
          case 57: // rule Hyc.l:243: {sr_eql} :
{ PUSH(SrEqual);}
            break;
          case 58: // rule Hyc.l:244: {amp_eql} :
{ PUSH(AmpersandEqual);}
            break;
          case 59: // rule Hyc.l:245: {caret_eql} :
{ PUSH(CaretEqual);}
            break;
          case 60: // rule Hyc.l:246: {or_eql} :
{ PUSH(OrEqual);}
            break;
          case 61: // rule Hyc.l:247: {dot} :
{ PUSH(Dot);}
            break;
          case 62: // rule Hyc.l:248: {mem_acc} :
{ PUSH(MemAccess);}
            break;
          case 63: // rule Hyc.l:249: {comma} :
{ push(Token::Specifier::Comma);}
            break;
          case 64: // rule Hyc.l:250: {rparen_l} :
{ push(Token::Specifier::RParenL);}
            break;
          case 65: // rule Hyc.l:251: {rparen_r} :
{ push(Token::Specifier::RParenR);}
            break;
          case 66: // rule Hyc.l:252: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 67: // rule Hyc.l:253: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 68: // rule Hyc.l:254: {quad} :
{ push(Token::Specifier::Quad); }
            break;
          case 69: // rule Hyc.l:255: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 70: // rule Hyc.l:256: {int_} :
{ push(Token::Specifier::Int);}
            break;
          case 71: // rule Hyc.l:257: {uint} :
{ push(Token::Specifier::UInt);}
            break;
          case 72: // rule Hyc.l:258: {half} :
{ push(Token::Specifier::Half);}
            break;
          case 73: // rule Hyc.l:259: {uhalf} :
{ push(Token::Specifier::UHalf);}
            break;
          case 74: // rule Hyc.l:260: {char} :
{ push(Token::Specifier::Char);}
            break;
          case 75: // rule Hyc.l:261: {uchar} :
{ push(Token::Specifier::UChar);}
            break;
          case 76: // rule Hyc.l:262: {short} :
{ push(Token::Specifier::Short);}
            break;
          case 77: // rule Hyc.l:263: {ushort} :
{ push(Token::Specifier::UShort);}
            break;
          case 78: // rule Hyc.l:264: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 79: // rule Hyc.l:265: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 80: // rule Hyc.l:266: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 81: // rule Hyc.l:267: {decl_cpy} :
{ push(Token::Specifier::DeclCpy); }
            break;
          case 82: // rule Hyc.l:268: {colon} :
{ push(Token::Specifier::Colon); }
            break;
          case 83: // rule Hyc.l:269: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 84: // rule Hyc.l:270: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 85: // rule Hyc.l:271: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 86: // rule Hyc.l:272: {brace_l} :
{ push(Token::Specifier::BraceL); }
            break;
          case 87: // rule Hyc.l:273: {brace_r} :
{ push(Token::Specifier::BraceR); }
            break;
          case 88: // rule Hyc.l:274: {bracket_r} :
{ push(Token::Specifier::BracketR); }
            break;
          case 89: // rule Hyc.l:275: {bracket_l} :
{ push(Token::Specifier::BracketL);}
            break;
          case 90: // rule Hyc.l:276: {less} :
{ push(Token::Specifier::Less); }
            break;
          case 91: // rule Hyc.l:277: {greater} :
{ push(Token::Specifier::Greater); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '~') goto S182;
  if (c1 == '}') goto S255;
  if (c1 == '|') goto S196;
  if (c1 == '{') goto S253;
  if (c1 == 'w') goto S69;
  if (c1 == 'u') goto S120;
  if (c1 == 't') goto S113;
  if (c1 == 's') goto S90;
  if (c1 == 'r') goto S54;
  if (c1 == 'o') goto S142;
  if (c1 == 'n') goto S127;
  if (c1 == 'm') goto S134;
  if (c1 == 'i') goto S76;
  if (c1 == 'f') goto S61;
  if (c1 == 'e') goto S83;
  if (c1 == 'd') goto S149;
  if (c1 == 'c') goto S97;
  if ('b' <= c1 && c1 <= 'z') goto S245;
  if (c1 == 'a') goto S105;
  if (c1 == '_') goto S245;
  if (c1 == '^') goto S207;
  if (c1 == ']') goto S257;
  if (c1 == '[') goto S210;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if (c1 == '?') goto S179;
  if (c1 == '>') goto S201;
  if (c1 == '=') goto S204;
  if (c1 == '<') goto S184;
  if (c1 == ';') goto S251;
  if (c1 == ':') goto S156;
  if ('1' <= c1 && c1 <= '9') goto S236;
  if (c1 == '0') goto S224;
  if (c1 == '/') goto S48;
  if (c1 == '.') goto S160;
  if (c1 == '-') goto S166;
  if (c1 == ',') goto S218;
  if (c1 == '+') goto S171;
  if (c1 == '*') goto S215;
  if (c1 == ')') goto S222;
  if (c1 == '(') goto S220;
  if (c1 == '&') goto S189;
  if (c1 == '%') goto S193;
  if (c1 == '$') goto S52;
  if (c1 == '#') goto S213;
  if (c1 == '!') goto S175;
  if (c1 == ' ') goto S259;
  if ('\t' <= c1 && c1 <= '\r') goto S259;
  return m.FSM_HALT(c1);

S48:
  m.FSM_TAKE(80);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S267;
  if (c1 == '/') goto S263;
  return m.FSM_HALT(c1);

S52:
  c1 = m.FSM_CHAR();
  if (c1 == '$') goto S269;
  if (0 <= c1) goto S52;
  return m.FSM_HALT(c1);

S54:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S271;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S61:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S285;
  if (c1 == 'o') goto S278;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S69:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S292;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S76:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S299;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S83:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S305;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S90:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S313;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S97:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S320;
  if ('b' <= c1 && c1 <= 'z') goto S245;
  if (c1 == 'a') goto S327;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S105:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S340;
  if (c1 == 's') goto S334;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S113:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S347;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S120:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S354;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S127:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S245;
  if (c1 == 'a') goto S361;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S134:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S375;
  if ('b' <= c1 && c1 <= 'z') goto S245;
  if (c1 == 'a') goto S368;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S142:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S382;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S149:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S389;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S156:
  m.FSM_TAKE(82);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S398;
  if (c1 == ':') goto S396;
  return m.FSM_HALT(c1);

S160:
  m.FSM_TAKE(61);
  c1 = m.FSM_CHAR();
  if (c1 == ']') goto S404;
  if (c1 == '>') goto S402;
  if ('0' <= c1 && c1 <= '9') goto S406;
  if (c1 == ',') goto S400;
  return m.FSM_HALT(c1);

S166:
  m.FSM_TAKE(78);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S413;
  if (c1 == '=') goto S418;
  if (c1 == '-') goto S416;
  return m.FSM_HALT(c1);

S171:
  m.FSM_TAKE(69);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S422;
  if (c1 == '+') goto S420;
  return m.FSM_HALT(c1);

S175:
  m.FSM_TAKE(28);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S426;
  if (c1 == '!') goto S424;
  return m.FSM_HALT(c1);

S179:
  m.FSM_TAKE(50);
  c1 = m.FSM_CHAR();
  if (c1 == '?') goto S428;
  return m.FSM_HALT(c1);

S182:
  m.FSM_TAKE(31);
  return m.FSM_HALT();

S184:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S432;
  if (c1 == '=') goto S435;
  if (c1 == '.') goto S430;
  return m.FSM_HALT(c1);

S189:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S440;
  if (c1 == '&') goto S438;
  return m.FSM_HALT(c1);

S193:
  m.FSM_TAKE(35);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S442;
  return m.FSM_HALT(c1);

S196:
  m.FSM_TAKE(44);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S447;
  if (c1 == '>') goto S444;
  if (c1 == '=') goto S449;
  return m.FSM_HALT(c1);

S201:
  m.FSM_TAKE(91);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S451;
  return m.FSM_HALT(c1);

S204:
  m.FSM_TAKE(83);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S453;
  return m.FSM_HALT(c1);

S207:
  m.FSM_TAKE(43);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S455;
  return m.FSM_HALT(c1);

S210:
  m.FSM_TAKE(89);
  c1 = m.FSM_CHAR();
  if (c1 == '.') goto S457;
  return m.FSM_HALT(c1);

S213:
  m.FSM_TAKE(47);
  return m.FSM_HALT();

S215:
  m.FSM_TAKE(79);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S459;
  return m.FSM_HALT(c1);

S218:
  m.FSM_TAKE(63);
  return m.FSM_HALT();

S220:
  m.FSM_TAKE(64);
  return m.FSM_HALT();

S222:
  m.FSM_TAKE(65);
  return m.FSM_HALT();

S224:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S463;
  if (c1 == 'u') goto S472;
  if (c1 == 's') goto S481;
  if (c1 == 'i') goto S496;
  if (c1 == 'h') goto S477;
  if (c1 == 'c') goto S479;
  if (c1 == 'b') goto S470;
  if ('8' <= c1 && c1 <= '9') goto S483;
  if ('0' <= c1 && c1 <= '7') goto S486;
  if (c1 == '.') goto S461;
  return m.FSM_HALT(c1);

S236:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S472;
  if (c1 == 's') goto S481;
  if (c1 == 'i') goto S496;
  if (c1 == 'h') goto S477;
  if (c1 == 'c') goto S479;
  if ('0' <= c1 && c1 <= '9') goto S236;
  if (c1 == '.') goto S461;
  return m.FSM_HALT(c1);

S245:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S251:
  m.FSM_TAKE(85);
  return m.FSM_HALT();

S253:
  m.FSM_TAKE(86);
  return m.FSM_HALT();

S255:
  m.FSM_TAKE(87);
  return m.FSM_HALT();

S257:
  m.FSM_TAKE(88);
  return m.FSM_HALT();

S259:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S259;
  if ('\t' <= c1 && c1 <= '\r') goto S259;
  return m.FSM_HALT(c1);

S263:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('\v' <= c1) goto S263;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S263;
  return m.FSM_HALT(c1);

S267:
  m.FSM_TAKE(54);
  return m.FSM_HALT();

S269:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S271:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S502;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S278:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S509;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S285:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S515;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S292:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S522;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S299:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S305:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S536;
  if (c1 == 'i') goto S529;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S313:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S543;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S320:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S550;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S327:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S557;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S334:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S340:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S564;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S347:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S571;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S354:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S578;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S361:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'm') goto S585;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S368:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S592;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S375:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'v') goto S599;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S382:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S606;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S389:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S613;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S396:
  m.FSM_TAKE(23);
  return m.FSM_HALT();

S398:
  m.FSM_TAKE(81);
  return m.FSM_HALT();

S400:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S402:
  m.FSM_TAKE(33);
  return m.FSM_HALT();

S404:
  m.FSM_TAKE(46);
  return m.FSM_HALT();

S406:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'q') goto S621;
  if (c1 == 'f') goto S619;
  if (c1 == 'e') goto S623;
  if (c1 == 'E') goto S623;
  if ('0' <= c1 && c1 <= '9') goto S406;
  return m.FSM_HALT(c1);

S413:
  m.FSM_TAKE(62);
  c1 = m.FSM_CHAR();
  if (c1 == ',') goto S626;
  return m.FSM_HALT(c1);

S416:
  m.FSM_TAKE(27);
  return m.FSM_HALT();

S418:
  m.FSM_TAKE(52);
  return m.FSM_HALT();

S420:
  m.FSM_TAKE(26);
  return m.FSM_HALT();

S422:
  m.FSM_TAKE(51);
  return m.FSM_HALT();

S424:
  m.FSM_TAKE(30);
  return m.FSM_HALT();

S426:
  m.FSM_TAKE(42);
  return m.FSM_HALT();

S428:
  m.FSM_TAKE(29);
  return m.FSM_HALT();

S430:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S432:
  m.FSM_TAKE(37);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S628;
  return m.FSM_HALT(c1);

S435:
  m.FSM_TAKE(39);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S630;
  return m.FSM_HALT(c1);

S438:
  m.FSM_TAKE(48);
  return m.FSM_HALT();

S440:
  m.FSM_TAKE(58);
  return m.FSM_HALT();

S442:
  m.FSM_TAKE(55);
  return m.FSM_HALT();

S444:
  m.FSM_TAKE(36);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S632;
  return m.FSM_HALT(c1);

S447:
  m.FSM_TAKE(49);
  return m.FSM_HALT();

S449:
  m.FSM_TAKE(60);
  return m.FSM_HALT();

S451:
  m.FSM_TAKE(40);
  return m.FSM_HALT();

S453:
  m.FSM_TAKE(41);
  return m.FSM_HALT();

S455:
  m.FSM_TAKE(59);
  return m.FSM_HALT();

S457:
  m.FSM_TAKE(45);
  return m.FSM_HALT();

S459:
  m.FSM_TAKE(53);
  return m.FSM_HALT();

S461:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S406;
  return m.FSM_HALT(c1);

S463:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S634;
  if (c1 == 't') goto S634;
  if (c1 == 'i') goto S634;
  if (c1 == 'g') goto S634;
  if (c1 == 'd') goto S634;
  if (c1 == ':') goto S634;
  return m.FSM_HALT(c1);

S470:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S645;
  return m.FSM_HALT(c1);

S472:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S659;
  if (c1 == 'i') goto S653;
  if (c1 == 'h') goto S655;
  if (c1 == 'c') goto S657;
  return m.FSM_HALT(c1);

S477:
  m.FSM_TAKE(72);
  return m.FSM_HALT();

S479:
  m.FSM_TAKE(74);
  return m.FSM_HALT();

S481:
  m.FSM_TAKE(76);
  return m.FSM_HALT();

S483:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S483;
  if (c1 == '.') goto S461;
  return m.FSM_HALT(c1);

S486:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S472;
  if (c1 == 's') goto S481;
  if (c1 == 'i') goto S496;
  if (c1 == 'h') goto S477;
  if (c1 == 'c') goto S479;
  if ('8' <= c1 && c1 <= '9') goto S483;
  if ('0' <= c1 && c1 <= '7') goto S486;
  if (c1 == '.') goto S461;
  return m.FSM_HALT(c1);

S496:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S472;
  if (c1 == 's') goto S481;
  if (c1 == 'h') goto S477;
  if (c1 == 'c') goto S479;
  return m.FSM_HALT(c1);

S502:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S661;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S509:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S515:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S668;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S522:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S674;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S529:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S681;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S536:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S687;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S543:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S693;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S550:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S700;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S557:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S707;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S564:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S713;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S571:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S719;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S578:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S726;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S585:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S733;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S592:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S740;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S599:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S747;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S606:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S754;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S613:
  m.FSM_TAKE(21);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S619:
  m.FSM_TAKE(66);
  return m.FSM_HALT();

S621:
  m.FSM_TAKE(68);
  return m.FSM_HALT();

S623:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S761;
  if (c1 == '+') goto S761;
  return m.FSM_HALT(c1);

S626:
  m.FSM_TAKE(25);
  return m.FSM_HALT();

S628:
  m.FSM_TAKE(56);
  return m.FSM_HALT();

S630:
  m.FSM_TAKE(38);
  return m.FSM_HALT();

S632:
  m.FSM_TAKE(57);
  return m.FSM_HALT();

S634:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S634;
  if (c1 == 'u') goto S472;
  if (c1 == 't') goto S634;
  if (c1 == 's') goto S481;
  if (c1 == 'h') goto S477;
  if ('g' <= c1 && c1 <= 'i') goto S634;
  if (c1 == 'd') goto S634;
  if (c1 == 'c') goto S479;
  if (c1 == ':') goto S634;
  return m.FSM_HALT(c1);

S645:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S472;
  if (c1 == 's') goto S481;
  if (c1 == 'i') goto S496;
  if (c1 == 'h') goto S477;
  if (c1 == 'c') goto S479;
  if ('0' <= c1 && c1 <= '1') goto S645;
  return m.FSM_HALT(c1);

S653:
  m.FSM_TAKE(71);
  return m.FSM_HALT();

S655:
  m.FSM_TAKE(73);
  return m.FSM_HALT();

S657:
  m.FSM_TAKE(75);
  return m.FSM_HALT();

S659:
  m.FSM_TAKE(77);
  return m.FSM_HALT();

S661:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S763;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S668:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S674:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S770;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S681:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S687:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S693:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S776;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S700:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S783;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S707:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S713:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S719:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'w') goto S790;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S726:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S796;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S733:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S802;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S740:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S809;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S747:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'd') goto S815;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S754:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S245;
  if (c1 == 'a') goto S821;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S761:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S828;
  return m.FSM_HALT(c1);

S763:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S833;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S770:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S776:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S839;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S783:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S845;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S790:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S796:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S802:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S852;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S809:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S815:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S821:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S859;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S828:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == 'q') goto S621;
  if (c1 == 'f') goto S619;
  if ('0' <= c1 && c1 <= '9') goto S828;
  return m.FSM_HALT(c1);

S833:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S839:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S845:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S866;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S852:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S245;
  if (c1 == 'a') goto S873;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S859:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S880;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S866:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S887;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S873:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S893;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S880:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S900;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S887:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S893:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S906;
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S900:
  m.FSM_TAKE(19);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);

S906:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S245;
  if (c1 == '_') goto S245;
  if ('A' <= c1 && c1 <= 'Z') goto S245;
  if ('0' <= c1 && c1 <= '9') goto S245;
  return m.FSM_HALT(c1);
}

