// ../src/Frontend/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Frontend/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Frontend/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>
#include <array>
#define PUSH(name) push(Token::Specifier::name)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   typedef size_t TokenPos;
   TokenPos get_tk_pos(){return m_current_token;}
   void goto_tk_pos(TokenPos tp) {m_current_token = tp;}
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   Token& eat()
   {
      Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   bool is_at(Token::Specifier spec, size_t amount) const
   {
	return spec == lookahead(1).type;
   }

   Token& lookahead(size_t amount)
   {
       auto minIndex = std::min(m_current_token + amount, m_tokens.size() - 1);
       return m_tokens[minIndex];
   }

   Token& match_token(Token::Specifier type)
   {
      Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is '{}'",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }

template<Token::Specifier... specs>
   Token& match_one_of()
   {
       Token& token = eat();
       // One of the arguments is the token type
       if (((token.type == specs) || ... ))
       {
           return token;
       }
       else
       {
           std::array<Token::Specifier, sizeof... (specs)> specs_ary = { specs... };
           std::string exp = "";
           for (auto& spec : specs_ary)
           {
               exp += fmt::format("{}, ", Token::Translate(spec));
           }
           auto descr = Error::FromToken(token);
           descr.Message = fmt::format("Expected one of '{}' but got '{}'", exp, Token::Translate(token.type));
           descr.Hint = fmt::format("The offending token is '{}'", token.text);
           Error::SyntacticalError(descr);
       }
   }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:193: \s+ :
            break;
          case 2: // rule Hyc.l:194: "//"[^\n]* :
            break;
          case 3: // rule Hyc.l:195: [$][^$]*[$] :
            break;
          case 4: // rule Hyc.l:196: {kw_return} :
{ push(Token::Specifier::KwReturn);}
            break;
          case 5: // rule Hyc.l:197: {kw_for} :
{ push(Token::Specifier::KwFor);}
            break;
          case 6: // rule Hyc.l:198: {kw_while} :
{ push(Token::Specifier::KwWhile);}
            break;
          case 7: // rule Hyc.l:199: {kw_if} :
{ push(Token::Specifier::KwIf);}
            break;
          case 8: // rule Hyc.l:200: {kw_elif} :
{ push(Token::Specifier::KwElif);}
            break;
          case 9: // rule Hyc.l:201: {kw_else} :
{ push(Token::Specifier::KwElse);}
            break;
          case 10: // rule Hyc.l:202: {kw_struct} :
{ push(Token::Specifier::KwStruct);}
            break;
          case 11: // rule Hyc.l:203: {kw_continue} :
{ push(Token::Specifier::KwContinue);}
            break;
          case 12: // rule Hyc.l:204: {kw_fptr} :
{ push(Token::Specifier::KwFptr);}
            break;
          case 13: // rule Hyc.l:205: {kw_as} :
{ push(Token::Specifier::KwAs);}
            break;
          case 14: // rule Hyc.l:206: {kw_sizeof} :
{ push(Token::Specifier::KwSizeof);}
            break;
          case 15: // rule Hyc.l:207: {kw_alignof} :
{ push(Token::Specifier::KwAlignof);}
            break;
          case 16: // rule Hyc.l:208: {kw_offsetof} :
{ push(Token::Specifier::KwOffsetof);}
            break;
          case 17: // rule Hyc.l:209: {kw_throw} :
{ PUSH(KwThrow);}
            break;
          case 18: // rule Hyc.l:210: {kw_union} :
{ PUSH(KwUnion);}
            break;
          case 19: // rule Hyc.l:211: {kw_namespace} :
{PUSH(KwNamespace);}
            break;
          case 20: // rule Hyc.l:212: {kw_match} :
{PUSH(KwMatch);}
            break;
          case 21: // rule Hyc.l:213: {kw_case} :
{PUSH(KwCase);}
            break;
          case 22: // rule Hyc.l:214: {kw_operator} :
{PUSH(KwOperator);}
            break;
          case 23: // rule Hyc.l:215: {kw_auto} :
{PUSH(KwAuto);}
            break;
          case 24: // rule Hyc.l:216: {kw_del} :
{PUSH(KwDel);}
            break;
          case 25: // rule Hyc.l:217: {kw_moved} :
{PUSH(KwMoved);}
            break;
          case 26: // rule Hyc.l:218: {double_colon} :
{ PUSH(DoubleColon);}
            break;
          case 27: // rule Hyc.l:219: {dot_comma} :
{ PUSH(DotComma);}
            break;
          case 28: // rule Hyc.l:220: {mem_acc_comma} :
{ PUSH(MemAccComma);}
            break;
          case 29: // rule Hyc.l:221: {double_plus} :
{ PUSH(DoublePlus);}
            break;
          case 30: // rule Hyc.l:222: {double_minus} :
{ PUSH(DoubleMinus);}
            break;
          case 31: // rule Hyc.l:223: {ex_mark} :
{ PUSH(ExclMark);}
            break;
          case 32: // rule Hyc.l:224: {double_qm} :
{ PUSH(DoubleQM);}
            break;
          case 33: // rule Hyc.l:225: {double_em} :
{ PUSH(DoubleEM);}
            break;
          case 34: // rule Hyc.l:226: {tilde} :
{ PUSH(Tilde);}
            break;
          case 35: // rule Hyc.l:227: {gen_fcall_open} :
{ PUSH(GenFCallOpen);}
            break;
          case 36: // rule Hyc.l:228: {gen_fcall_close} :
{PUSH(GenFCallClose);}
            break;
          case 37: // rule Hyc.l:229: {amp} :
{ PUSH(Ampersand);}
            break;
          case 38: // rule Hyc.l:230: {perc} :
{ PUSH(Percent);}
            break;
          case 39: // rule Hyc.l:231: {sr} :
{ PUSH(ShiftRight);}
            break;
          case 40: // rule Hyc.l:232: {sl} :
{ PUSH(ShiftLeft);}
            break;
          case 41: // rule Hyc.l:233: {thrway} :
{ PUSH(ThreeWay);}
            break;
          case 42: // rule Hyc.l:234: {lessEql} :
{ PUSH(LessEql);}
            break;
          case 43: // rule Hyc.l:235: {grEql} :
{ PUSH(GreaterEql);}
            break;
          case 44: // rule Hyc.l:236: {mem_cpy} :
{ PUSH(MemCpy);}
            break;
          case 45: // rule Hyc.l:237: {mem_move} :
{ PUSH(MemMove);}
            break;
          case 46: // rule Hyc.l:238: {mem_set} :
{ PUSH(MemSet);}
            break;
          case 47: // rule Hyc.l:239: {double_eql} :
{ PUSH(DoubleEqual);}
            break;
          case 48: // rule Hyc.l:240: {not_equal} :
{ PUSH(NotEqual);}
            break;
          case 49: // rule Hyc.l:241: {caret} :
{ PUSH(Caret);}
            break;
          case 50: // rule Hyc.l:242: {or} :
{ PUSH(Or);}
            break;
          case 51: // rule Hyc.l:243: {array_start} :
{ PUSH(ArrayStart);}
            break;
          case 52: // rule Hyc.l:244: {array_end} :
{ PUSH(ArrayEnd);}
            break;
          case 53: // rule Hyc.l:245: {hashtag} :
{ PUSH(Hashtag);}
            break;
          case 54: // rule Hyc.l:246: {double_amp} :
{ PUSH(DoubleAmpersand);}
            break;
          case 55: // rule Hyc.l:247: {double_or} :
{ PUSH(DoubleOr);}
            break;
          case 56: // rule Hyc.l:248: {questionmark} :
{ PUSH(QuestionMark);}
            break;
          case 57: // rule Hyc.l:249: {plus_eql} :
{ PUSH(PlusEqual);}
            break;
          case 58: // rule Hyc.l:250: {minus_eql} :
{ PUSH(MinusEqual);}
            break;
          case 59: // rule Hyc.l:251: {asterix_eql} :
{ PUSH(AsterixEqual);}
            break;
          case 60: // rule Hyc.l:252: {slash_eql} :
{ PUSH(SlashEqual);}
            break;
          case 61: // rule Hyc.l:253: {percent_equal} :
{ PUSH(PercentEqual);}
            break;
          case 62: // rule Hyc.l:254: {sl_eql} :
{ PUSH(SlEqual);}
            break;
          case 63: // rule Hyc.l:255: {sr_eql} :
{ PUSH(SrEqual);}
            break;
          case 64: // rule Hyc.l:256: {amp_eql} :
{ PUSH(AmpersandEqual);}
            break;
          case 65: // rule Hyc.l:257: {caret_eql} :
{ PUSH(CaretEqual);}
            break;
          case 66: // rule Hyc.l:258: {or_eql} :
{ PUSH(OrEqual);}
            break;
          case 67: // rule Hyc.l:259: {dot} :
{ PUSH(Dot);}
            break;
          case 68: // rule Hyc.l:260: {mem_acc} :
{ PUSH(MemAccess);}
            break;
          case 69: // rule Hyc.l:261: {comma} :
{ push(Token::Specifier::Comma);}
            break;
          case 70: // rule Hyc.l:262: {rparen_l} :
{ push(Token::Specifier::RParenL);}
            break;
          case 71: // rule Hyc.l:263: {rparen_r} :
{ push(Token::Specifier::RParenR);}
            break;
          case 72: // rule Hyc.l:264: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 73: // rule Hyc.l:265: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 74: // rule Hyc.l:266: {quad} :
{ push(Token::Specifier::Quad); }
            break;
          case 75: // rule Hyc.l:267: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 76: // rule Hyc.l:268: {int_} :
{ push(Token::Specifier::Int);}
            break;
          case 77: // rule Hyc.l:269: {uint} :
{ push(Token::Specifier::UInt);}
            break;
          case 78: // rule Hyc.l:270: {half} :
{ push(Token::Specifier::Half);}
            break;
          case 79: // rule Hyc.l:271: {uhalf} :
{ push(Token::Specifier::UHalf);}
            break;
          case 80: // rule Hyc.l:272: {char} :
{ push(Token::Specifier::Char);}
            break;
          case 81: // rule Hyc.l:273: {uchar} :
{ push(Token::Specifier::UChar);}
            break;
          case 82: // rule Hyc.l:274: {short} :
{ push(Token::Specifier::Short);}
            break;
          case 83: // rule Hyc.l:275: {ushort} :
{ push(Token::Specifier::UShort);}
            break;
          case 84: // rule Hyc.l:276: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 85: // rule Hyc.l:277: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 86: // rule Hyc.l:278: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 87: // rule Hyc.l:279: {decl_cpy} :
{ push(Token::Specifier::DeclCpy); }
            break;
          case 88: // rule Hyc.l:280: {colon} :
{ push(Token::Specifier::Colon); }
            break;
          case 89: // rule Hyc.l:281: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 90: // rule Hyc.l:282: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 91: // rule Hyc.l:283: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 92: // rule Hyc.l:284: {brace_l} :
{ push(Token::Specifier::BraceL); }
            break;
          case 93: // rule Hyc.l:285: {brace_r} :
{ push(Token::Specifier::BraceR); }
            break;
          case 94: // rule Hyc.l:286: {bracket_r} :
{ push(Token::Specifier::BracketR); }
            break;
          case 95: // rule Hyc.l:287: {bracket_l} :
{ push(Token::Specifier::BracketL);}
            break;
          case 96: // rule Hyc.l:288: {less} :
{ push(Token::Specifier::Less); }
            break;
          case 97: // rule Hyc.l:289: {greater} :
{ push(Token::Specifier::Greater); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '~') goto S185;
  if (c1 == '}') goto S258;
  if (c1 == '|') goto S199;
  if (c1 == '{') goto S256;
  if (c1 == 'w') goto S69;
  if (c1 == 'u') goto S130;
  if (c1 == 't') goto S123;
  if (c1 == 's') goto S90;
  if (c1 == 'r') goto S54;
  if (c1 == 'o') goto S115;
  if (c1 == 'n') goto S137;
  if (c1 == 'm') goto S144;
  if (c1 == 'i') goto S76;
  if (c1 == 'f') goto S61;
  if (c1 == 'e') goto S83;
  if (c1 == 'd') goto S152;
  if (c1 == 'c') goto S98;
  if ('b' <= c1 && c1 <= 'z') goto S248;
  if (c1 == 'a') goto S106;
  if (c1 == '_') goto S248;
  if (c1 == '^') goto S210;
  if (c1 == ']') goto S260;
  if (c1 == '[') goto S213;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if (c1 == '?') goto S182;
  if (c1 == '>') goto S204;
  if (c1 == '=') goto S207;
  if (c1 == '<') goto S187;
  if (c1 == ';') goto S254;
  if (c1 == ':') goto S159;
  if ('1' <= c1 && c1 <= '9') goto S239;
  if (c1 == '0') goto S227;
  if (c1 == '/') goto S48;
  if (c1 == '.') goto S163;
  if (c1 == '-') goto S169;
  if (c1 == ',') goto S221;
  if (c1 == '+') goto S174;
  if (c1 == '*') goto S218;
  if (c1 == ')') goto S225;
  if (c1 == '(') goto S223;
  if (c1 == '&') goto S192;
  if (c1 == '%') goto S196;
  if (c1 == '$') goto S52;
  if (c1 == '#') goto S216;
  if (c1 == '!') goto S178;
  if (c1 == ' ') goto S262;
  if ('\t' <= c1 && c1 <= '\r') goto S262;
  return m.FSM_HALT(c1);

S48:
  m.FSM_TAKE(86);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S270;
  if (c1 == '/') goto S266;
  return m.FSM_HALT(c1);

S52:
  c1 = m.FSM_CHAR();
  if (c1 == '$') goto S272;
  if (0 <= c1) goto S52;
  return m.FSM_HALT(c1);

S54:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S274;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S61:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S288;
  if (c1 == 'o') goto S281;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S69:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S295;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S76:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S302;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S83:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S308;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S90:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S316;
  if (c1 == 'i') goto S323;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S98:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S330;
  if ('b' <= c1 && c1 <= 'z') goto S248;
  if (c1 == 'a') goto S337;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S106:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S357;
  if (c1 == 's') goto S344;
  if (c1 == 'l') goto S350;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S115:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S371;
  if (c1 == 'f') goto S364;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S123:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S378;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S130:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S385;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S137:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S248;
  if (c1 == 'a') goto S392;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S144:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S406;
  if ('b' <= c1 && c1 <= 'z') goto S248;
  if (c1 == 'a') goto S399;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S152:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S413;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S159:
  m.FSM_TAKE(88);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S422;
  if (c1 == ':') goto S420;
  return m.FSM_HALT(c1);

S163:
  m.FSM_TAKE(67);
  c1 = m.FSM_CHAR();
  if (c1 == ']') goto S428;
  if (c1 == '>') goto S426;
  if ('0' <= c1 && c1 <= '9') goto S430;
  if (c1 == ',') goto S424;
  return m.FSM_HALT(c1);

S169:
  m.FSM_TAKE(84);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S437;
  if (c1 == '=') goto S445;
  if (c1 == '-') goto S440;
  return m.FSM_HALT(c1);

S174:
  m.FSM_TAKE(75);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S449;
  if (c1 == '+') goto S447;
  return m.FSM_HALT(c1);

S178:
  m.FSM_TAKE(31);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S453;
  if (c1 == '!') goto S451;
  return m.FSM_HALT(c1);

S182:
  m.FSM_TAKE(56);
  c1 = m.FSM_CHAR();
  if (c1 == '?') goto S455;
  return m.FSM_HALT(c1);

S185:
  m.FSM_TAKE(34);
  return m.FSM_HALT();

S187:
  m.FSM_TAKE(96);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S459;
  if (c1 == '=') goto S462;
  if (c1 == '.') goto S457;
  return m.FSM_HALT(c1);

S192:
  m.FSM_TAKE(37);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S467;
  if (c1 == '&') goto S465;
  return m.FSM_HALT(c1);

S196:
  m.FSM_TAKE(38);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S469;
  return m.FSM_HALT(c1);

S199:
  m.FSM_TAKE(50);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S474;
  if (c1 == '>') goto S471;
  if (c1 == '=') goto S476;
  return m.FSM_HALT(c1);

S204:
  m.FSM_TAKE(97);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S478;
  return m.FSM_HALT(c1);

S207:
  m.FSM_TAKE(89);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S480;
  return m.FSM_HALT(c1);

S210:
  m.FSM_TAKE(49);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S482;
  return m.FSM_HALT(c1);

S213:
  m.FSM_TAKE(95);
  c1 = m.FSM_CHAR();
  if (c1 == '.') goto S484;
  return m.FSM_HALT(c1);

S216:
  m.FSM_TAKE(53);
  return m.FSM_HALT();

S218:
  m.FSM_TAKE(85);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S486;
  return m.FSM_HALT(c1);

S221:
  m.FSM_TAKE(69);
  return m.FSM_HALT();

S223:
  m.FSM_TAKE(70);
  return m.FSM_HALT();

S225:
  m.FSM_TAKE(71);
  return m.FSM_HALT();

S227:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S490;
  if (c1 == 'u') goto S499;
  if (c1 == 's') goto S508;
  if (c1 == 'i') goto S523;
  if (c1 == 'h') goto S504;
  if (c1 == 'c') goto S506;
  if (c1 == 'b') goto S497;
  if ('8' <= c1 && c1 <= '9') goto S510;
  if ('0' <= c1 && c1 <= '7') goto S513;
  if (c1 == '.') goto S488;
  return m.FSM_HALT(c1);

S239:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S499;
  if (c1 == 's') goto S508;
  if (c1 == 'i') goto S523;
  if (c1 == 'h') goto S504;
  if (c1 == 'c') goto S506;
  if ('0' <= c1 && c1 <= '9') goto S239;
  if (c1 == '.') goto S488;
  return m.FSM_HALT(c1);

S248:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S254:
  m.FSM_TAKE(91);
  return m.FSM_HALT();

S256:
  m.FSM_TAKE(92);
  return m.FSM_HALT();

S258:
  m.FSM_TAKE(93);
  return m.FSM_HALT();

S260:
  m.FSM_TAKE(94);
  return m.FSM_HALT();

S262:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S262;
  if ('\t' <= c1 && c1 <= '\r') goto S262;
  return m.FSM_HALT(c1);

S266:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('\v' <= c1) goto S266;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S266;
  return m.FSM_HALT(c1);

S270:
  m.FSM_TAKE(60);
  return m.FSM_HALT();

S272:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S274:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S529;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S281:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S536;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S288:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S542;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S295:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S549;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S302:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S308:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S563;
  if (c1 == 'i') goto S556;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S316:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S570;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S323:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S577;
  if ('a' <= c1 && c1 <= 'y') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S330:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S584;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S337:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S591;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S344:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S350:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S598;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S357:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S605;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S364:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S612;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S371:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S619;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S378:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S626;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S385:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S633;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S392:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'm') goto S640;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S399:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S647;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S406:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'v') goto S654;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S413:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S661;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S420:
  m.FSM_TAKE(26);
  return m.FSM_HALT();

S422:
  m.FSM_TAKE(87);
  return m.FSM_HALT();

S424:
  m.FSM_TAKE(27);
  return m.FSM_HALT();

S426:
  m.FSM_TAKE(36);
  return m.FSM_HALT();

S428:
  m.FSM_TAKE(52);
  return m.FSM_HALT();

S430:
  m.FSM_TAKE(73);
  c1 = m.FSM_CHAR();
  if (c1 == 'q') goto S669;
  if (c1 == 'f') goto S667;
  if (c1 == 'e') goto S671;
  if (c1 == 'E') goto S671;
  if ('0' <= c1 && c1 <= '9') goto S430;
  return m.FSM_HALT(c1);

S437:
  m.FSM_TAKE(68);
  c1 = m.FSM_CHAR();
  if (c1 == ',') goto S674;
  return m.FSM_HALT(c1);

S440:
  m.FSM_TAKE(30);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S676;
  if (c1 == '+') goto S678;
  if (c1 == '*') goto S680;
  return m.FSM_HALT(c1);

S445:
  m.FSM_TAKE(58);
  return m.FSM_HALT();

S447:
  m.FSM_TAKE(29);
  return m.FSM_HALT();

S449:
  m.FSM_TAKE(57);
  return m.FSM_HALT();

S451:
  m.FSM_TAKE(33);
  return m.FSM_HALT();

S453:
  m.FSM_TAKE(48);
  return m.FSM_HALT();

S455:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S457:
  m.FSM_TAKE(35);
  return m.FSM_HALT();

S459:
  m.FSM_TAKE(40);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S682;
  return m.FSM_HALT(c1);

S462:
  m.FSM_TAKE(42);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S684;
  return m.FSM_HALT(c1);

S465:
  m.FSM_TAKE(54);
  return m.FSM_HALT();

S467:
  m.FSM_TAKE(64);
  return m.FSM_HALT();

S469:
  m.FSM_TAKE(61);
  return m.FSM_HALT();

S471:
  m.FSM_TAKE(39);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S686;
  return m.FSM_HALT(c1);

S474:
  m.FSM_TAKE(55);
  return m.FSM_HALT();

S476:
  m.FSM_TAKE(66);
  return m.FSM_HALT();

S478:
  m.FSM_TAKE(43);
  return m.FSM_HALT();

S480:
  m.FSM_TAKE(47);
  return m.FSM_HALT();

S482:
  m.FSM_TAKE(65);
  return m.FSM_HALT();

S484:
  m.FSM_TAKE(51);
  return m.FSM_HALT();

S486:
  m.FSM_TAKE(59);
  return m.FSM_HALT();

S488:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S430;
  return m.FSM_HALT(c1);

S490:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S688;
  if (c1 == 't') goto S688;
  if (c1 == 'i') goto S688;
  if (c1 == 'g') goto S688;
  if (c1 == 'd') goto S688;
  if (c1 == ':') goto S688;
  return m.FSM_HALT(c1);

S497:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S699;
  return m.FSM_HALT(c1);

S499:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S713;
  if (c1 == 'i') goto S707;
  if (c1 == 'h') goto S709;
  if (c1 == 'c') goto S711;
  return m.FSM_HALT(c1);

S504:
  m.FSM_TAKE(78);
  return m.FSM_HALT();

S506:
  m.FSM_TAKE(80);
  return m.FSM_HALT();

S508:
  m.FSM_TAKE(82);
  return m.FSM_HALT();

S510:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S510;
  if (c1 == '.') goto S488;
  return m.FSM_HALT(c1);

S513:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S499;
  if (c1 == 's') goto S508;
  if (c1 == 'i') goto S523;
  if (c1 == 'h') goto S504;
  if (c1 == 'c') goto S506;
  if ('8' <= c1 && c1 <= '9') goto S510;
  if ('0' <= c1 && c1 <= '7') goto S513;
  if (c1 == '.') goto S488;
  return m.FSM_HALT(c1);

S523:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S499;
  if (c1 == 's') goto S508;
  if (c1 == 'h') goto S504;
  if (c1 == 'c') goto S506;
  return m.FSM_HALT(c1);

S529:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S715;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S536:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S542:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S722;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S549:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S728;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S556:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S735;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S563:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S741;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S570:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S747;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S577:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S754;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S584:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S761;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S591:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S768;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S598:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'g') goto S774;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S605:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S781;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S612:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S787;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S619:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S794;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S626:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S801;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S633:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S808;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S640:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S815;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S647:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S822;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S654:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S829;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S661:
  m.FSM_TAKE(24);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S667:
  m.FSM_TAKE(72);
  return m.FSM_HALT();

S669:
  m.FSM_TAKE(74);
  return m.FSM_HALT();

S671:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S836;
  if (c1 == '+') goto S836;
  return m.FSM_HALT(c1);

S674:
  m.FSM_TAKE(28);
  return m.FSM_HALT();

S676:
  m.FSM_TAKE(44);
  return m.FSM_HALT();

S678:
  m.FSM_TAKE(45);
  return m.FSM_HALT();

S680:
  m.FSM_TAKE(46);
  return m.FSM_HALT();

S682:
  m.FSM_TAKE(62);
  return m.FSM_HALT();

S684:
  m.FSM_TAKE(41);
  return m.FSM_HALT();

S686:
  m.FSM_TAKE(63);
  return m.FSM_HALT();

S688:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S688;
  if (c1 == 'u') goto S499;
  if (c1 == 't') goto S688;
  if (c1 == 's') goto S508;
  if (c1 == 'h') goto S504;
  if ('g' <= c1 && c1 <= 'i') goto S688;
  if (c1 == 'd') goto S688;
  if (c1 == 'c') goto S506;
  if (c1 == ':') goto S688;
  return m.FSM_HALT(c1);

S699:
  m.FSM_TAKE(76);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S499;
  if (c1 == 's') goto S508;
  if (c1 == 'i') goto S523;
  if (c1 == 'h') goto S504;
  if (c1 == 'c') goto S506;
  if ('0' <= c1 && c1 <= '1') goto S699;
  return m.FSM_HALT(c1);

S707:
  m.FSM_TAKE(77);
  return m.FSM_HALT();

S709:
  m.FSM_TAKE(79);
  return m.FSM_HALT();

S711:
  m.FSM_TAKE(81);
  return m.FSM_HALT();

S713:
  m.FSM_TAKE(83);
  return m.FSM_HALT();

S715:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S838;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S722:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S728:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S845;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S735:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S741:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S747:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S851;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S754:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S858;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S761:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S865;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S768:
  m.FSM_TAKE(21);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S774:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S872;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S781:
  m.FSM_TAKE(23);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S787:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S879;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S794:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S248;
  if (c1 == 'a') goto S886;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S801:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'w') goto S893;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S808:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S899;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S815:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S905;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S822:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S912;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S829:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'd') goto S918;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S836:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S924;
  return m.FSM_HALT(c1);

S838:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S929;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S845:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S851:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S935;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S858:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S941;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S865:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S947;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S872:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S954;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S879:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S961;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S886:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S968;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S893:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S899:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S905:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S975;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S912:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S918:
  m.FSM_TAKE(25);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S924:
  m.FSM_TAKE(73);
  c1 = m.FSM_CHAR();
  if (c1 == 'q') goto S669;
  if (c1 == 'f') goto S667;
  if ('0' <= c1 && c1 <= '9') goto S924;
  return m.FSM_HALT(c1);

S929:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S935:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S941:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S947:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S982;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S954:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S989;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S961:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S995;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S968:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S1002;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S975:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S248;
  if (c1 == 'a') goto S1009;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S982:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S1016;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S989:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S995:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S1022;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S1002:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S1028;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S1009:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S1034;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S1016:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S1022:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S1028:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S1034:
  m.FSM_TAKE(90);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S1041;
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);

S1041:
  m.FSM_TAKE(19);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S248;
  if (c1 == '_') goto S248;
  if ('A' <= c1 && c1 <= 'Z') goto S248;
  if ('0' <= c1 && c1 <= '9') goto S248;
  return m.FSM_HALT(c1);
}

