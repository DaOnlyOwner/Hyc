// ../src/Frontend/Lexer.cpp generated by reflex 3.0.12 from Hyc.l

#define REFLEX_VERSION "3.0.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "../include/Frontend/Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "../src/Frontend/Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#include "Token.h"
#include "DebugPrint.h"
#include "fmt/core.h"
#include <vector>
#include <algorithm>
#include <array>
#define PUSH(name) push(Token::Specifier::name)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {

   std::vector<Token> m_tokens;
   size_t m_current_token = -1; // Start before the actual token
   std::string file;
   void push(Token::Specifier ttype)
   {
	m_tokens.emplace_back(ttype, str(), file, matcher().line(), lineno(), columno(), lineno_end(), columno_end());
   }

public:
   void set_filename(const std::string& filename)
   {
        file=filename;
   }
   Token& eat()
   {
      Token& out = lookahead(1);
      m_current_token++;
      return out;
   }

   const Token& lookahead(size_t amount) const
   {
      auto minIndex = std::min(m_current_token+amount, m_tokens.size()-1);
      return m_tokens[minIndex];
   }

   bool is_at(Token::Specifier spec, size_t amount) const
   {
	return spec == lookahead(1).type;
   }

   Token& lookahead(size_t amount)
   {
       auto minIndex = std::min(m_current_token + amount, m_tokens.size() - 1);
       return m_tokens[minIndex];
   }

   Token& match_token(Token::Specifier type)
   {
      Token& token = eat();
      if(token.type != type)
      {
          auto descr = Error::FromToken(token);
          descr.Message = fmt::format("Expected {}, but got {}",Token::Translate(type),Token::Translate(token.type));
	  descr.Hint = fmt::format("The offending token is '{}'",token.text);
          Error::SyntacticalError(descr);
      }
      return token;
    }

template<Token::Specifier... specs>
   Token& match_one_of()
   {
       Token& token = eat();
       // One of the arguments is the token type
       if (((token.type == specs) || ... ))
       {
           return token;
       }
       else
       {
           std::array<Token::Specifier, sizeof... (specs)> specs_ary = { specs... };
           std::string exp = "";
           for (auto& spec : specs_ary)
           {
               exp += fmt::format("{}, ", Token::Translate(spec));
           }
           auto descr = Error::FromToken(token);
           descr.Message = fmt::format("Expected one of '{}' but got '{}'", exp, Token::Translate(token.type));
           descr.Hint = fmt::format("The offending token is '{}'", token.text);
           Error::SyntacticalError(descr);
       }
   }



 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ push(Token::Specifier::Eof); return 0;}
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule Hyc.l:176: \s+ :
            break;
          case 2: // rule Hyc.l:177: {kw_return} :
{ push(Token::Specifier::KwReturn);}
            break;
          case 3: // rule Hyc.l:178: {kw_for} :
{ push(Token::Specifier::KwFor);}
            break;
          case 4: // rule Hyc.l:179: {kw_while} :
{ push(Token::Specifier::KwWhile);}
            break;
          case 5: // rule Hyc.l:180: {kw_if} :
{ push(Token::Specifier::KwIf);}
            break;
          case 6: // rule Hyc.l:181: {kw_elif} :
{ push(Token::Specifier::KwElif);}
            break;
          case 7: // rule Hyc.l:182: {kw_else} :
{ push(Token::Specifier::KwElse);}
            break;
          case 8: // rule Hyc.l:183: {kw_struct} :
{ push(Token::Specifier::KwStruct);}
            break;
          case 9: // rule Hyc.l:184: {kw_continue} :
{ push(Token::Specifier::KwContinue);}
            break;
          case 10: // rule Hyc.l:185: {kw_fptr} :
{ push(Token::Specifier::KwFptr);}
            break;
          case 11: // rule Hyc.l:186: {kw_as} :
{ push(Token::Specifier::KwAs);}
            break;
          case 12: // rule Hyc.l:187: {kw_throw} :
{ PUSH(KwThrow);}
            break;
          case 13: // rule Hyc.l:188: {kw_union} :
{ PUSH(KwUnion);}
            break;
          case 14: // rule Hyc.l:189: {kw_namespace} :
{PUSH(KwNamespace);}
            break;
          case 15: // rule Hyc.l:190: {kw_match} :
{PUSH(KwMatch);}
            break;
          case 16: // rule Hyc.l:191: {kw_case} :
{PUSH(KwCase);}
            break;
          case 17: // rule Hyc.l:192: {kw_operator} :
{PUSH(KwOperator);}
            break;
          case 18: // rule Hyc.l:193: {kw_auto} :
{PUSH(KwAuto);}
            break;
          case 19: // rule Hyc.l:194: {double_colon} :
{ PUSH(DoubleColon);}
            break;
          case 20: // rule Hyc.l:195: {double_plus} :
{ PUSH(DoublePlus);}
            break;
          case 21: // rule Hyc.l:196: {double_minus} :
{ PUSH(DoubleMinus);}
            break;
          case 22: // rule Hyc.l:197: {ex_mark} :
{ PUSH(ExclMark);}
            break;
          case 23: // rule Hyc.l:198: {tilde} :
{ PUSH(Tilde);}
            break;
          case 24: // rule Hyc.l:199: {gen_fcall_open} :
{ PUSH(GenFCallOpen);}
            break;
          case 25: // rule Hyc.l:200: {gen_fcall_close} :
{PUSH(GenFCallClose);}
            break;
          case 26: // rule Hyc.l:201: {amp} :
{ PUSH(Ampersand);}
            break;
          case 27: // rule Hyc.l:202: {perc} :
{ PUSH(Percent);}
            break;
          case 28: // rule Hyc.l:203: {sr} :
{ PUSH(ShiftRight);}
            break;
          case 29: // rule Hyc.l:204: {sl} :
{ PUSH(ShiftLeft);}
            break;
          case 30: // rule Hyc.l:205: {thrway} :
{ PUSH(ThreeWay);}
            break;
          case 31: // rule Hyc.l:206: {lessEql} :
{ PUSH(LessEql);}
            break;
          case 32: // rule Hyc.l:207: {grEql} :
{ PUSH(GreaterEql);}
            break;
          case 33: // rule Hyc.l:208: {double_eql} :
{ PUSH(DoubleEqual);}
            break;
          case 34: // rule Hyc.l:209: {not_equal} :
{ PUSH(NotEqual);}
            break;
          case 35: // rule Hyc.l:210: {caret} :
{ PUSH(Caret);}
            break;
          case 36: // rule Hyc.l:211: {or} :
{ PUSH(Or);}
            break;
          case 37: // rule Hyc.l:212: {hashtag} :
{ PUSH(Hashtag);}
            break;
          case 38: // rule Hyc.l:213: {double_amp} :
{ PUSH(DoubleAmpersand);}
            break;
          case 39: // rule Hyc.l:214: {double_or} :
{ PUSH(DoubleOr);}
            break;
          case 40: // rule Hyc.l:215: {questionmark} :
{ PUSH(QuestionMark);}
            break;
          case 41: // rule Hyc.l:216: {plus_eql} :
{ PUSH(PlusEqual);}
            break;
          case 42: // rule Hyc.l:217: {minus_eql} :
{ PUSH(MinusEqual);}
            break;
          case 43: // rule Hyc.l:218: {asterix_eql} :
{ PUSH(AsterixEqual);}
            break;
          case 44: // rule Hyc.l:219: {slash_eql} :
{ PUSH(SlashEqual);}
            break;
          case 45: // rule Hyc.l:220: {percent_equal} :
{ PUSH(PercentEqual);}
            break;
          case 46: // rule Hyc.l:221: {sl_eql} :
{ PUSH(SlEqual);}
            break;
          case 47: // rule Hyc.l:222: {sr_eql} :
{ PUSH(SrEqual);}
            break;
          case 48: // rule Hyc.l:223: {amp_eql} :
{ PUSH(AmpersandEqual);}
            break;
          case 49: // rule Hyc.l:224: {caret_eql} :
{ PUSH(CaretEqual);}
            break;
          case 50: // rule Hyc.l:225: {or_eql} :
{ PUSH(OrEqual);}
            break;
          case 51: // rule Hyc.l:226: {dot} :
{ PUSH(Dot);}
            break;
          case 52: // rule Hyc.l:227: {mem_acc} :
{ PUSH(MemAccess);}
            break;
          case 53: // rule Hyc.l:228: {comma} :
{ push(Token::Specifier::Comma);}
            break;
          case 54: // rule Hyc.l:229: {rparen_l} :
{ push(Token::Specifier::RParenL);}
            break;
          case 55: // rule Hyc.l:230: {rparen_r} :
{ push(Token::Specifier::RParenR);}
            break;
          case 56: // rule Hyc.l:231: {float} :
{ push(Token::Specifier::Float); }
            break;
          case 57: // rule Hyc.l:232: {double} :
{ push(Token::Specifier::Double); }
            break;
          case 58: // rule Hyc.l:233: {quad} :
{ push(Token::Specifier::Quad); }
            break;
          case 59: // rule Hyc.l:234: {plus} :
{ push(Token::Specifier::Plus); }
            break;
          case 60: // rule Hyc.l:235: {int_} :
{ push(Token::Specifier::Int);}
            break;
          case 61: // rule Hyc.l:236: {uint} :
{ push(Token::Specifier::UInt);}
            break;
          case 62: // rule Hyc.l:237: {half} :
{ push(Token::Specifier::Half);}
            break;
          case 63: // rule Hyc.l:238: {uhalf} :
{ push(Token::Specifier::UHalf);}
            break;
          case 64: // rule Hyc.l:239: {char} :
{ push(Token::Specifier::Char);}
            break;
          case 65: // rule Hyc.l:240: {uchar} :
{ push(Token::Specifier::UChar);}
            break;
          case 66: // rule Hyc.l:241: {short} :
{ push(Token::Specifier::Short);}
            break;
          case 67: // rule Hyc.l:242: {ushort} :
{ push(Token::Specifier::UShort);}
            break;
          case 68: // rule Hyc.l:243: {minus} :
{ push(Token::Specifier::Minus); }
            break;
          case 69: // rule Hyc.l:244: {asterix} :
{ push(Token::Specifier::Asterix); }
            break;
          case 70: // rule Hyc.l:245: {slash} :
{ push(Token::Specifier::Slash); }
            break;
          case 71: // rule Hyc.l:246: {decl_cpy} :
{ push(Token::Specifier::DeclCpy); }
            break;
          case 72: // rule Hyc.l:247: {colon} :
{ push(Token::Specifier::Colon); }
            break;
          case 73: // rule Hyc.l:248: {equal} :
{ push(Token::Specifier::Equal); }
            break;
          case 74: // rule Hyc.l:249: {ident} :
{ push(Token::Specifier::Ident); }
            break;
          case 75: // rule Hyc.l:250: {semicln} :
{ push(Token::Specifier::Semicolon); }
            break;
          case 76: // rule Hyc.l:251: {brace_l} :
{ push(Token::Specifier::BraceL); }
            break;
          case 77: // rule Hyc.l:252: {brace_r} :
{ push(Token::Specifier::BraceR); }
            break;
          case 78: // rule Hyc.l:253: {bracket_r} :
{ push(Token::Specifier::BracketR); }
            break;
          case 79: // rule Hyc.l:254: {bracket_l} :
{ push(Token::Specifier::BracketL);}
            break;
          case 80: // rule Hyc.l:255: {less} :
{ push(Token::Specifier::Less); }
            break;
          case 81: // rule Hyc.l:256: {greater} :
{ push(Token::Specifier::Greater); }
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '~') goto S156;
  if (c1 == '}') goto S235;
  if (c1 == '|') goto S174;
  if (c1 == '{') goto S233;
  if (c1 == 'w') goto S61;
  if (c1 == 'u') goto S112;
  if (c1 == 't') goto S105;
  if (c1 == 's') goto S82;
  if (c1 == 'r') goto S46;
  if (c1 == 'o') goto S133;
  if (c1 == 'n') goto S119;
  if (c1 == 'm') goto S126;
  if (c1 == 'i') goto S68;
  if (c1 == 'f') goto S53;
  if (c1 == 'e') goto S75;
  if (c1 == 'c') goto S89;
  if ('b' <= c1 && c1 <= 'z') goto S225;
  if (c1 == 'a') goto S97;
  if (c1 == '_') goto S225;
  if (c1 == '^') goto S185;
  if (c1 == ']') goto S237;
  if (c1 == '[') goto S239;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if (c1 == '?') goto S190;
  if (c1 == '>') goto S179;
  if (c1 == '=') goto S182;
  if (c1 == '<') goto S158;
  if (c1 == ';') goto S231;
  if (c1 == ':') goto S140;
  if ('1' <= c1 && c1 <= '9') goto S216;
  if (c1 == '0') goto S204;
  if (c1 == '/') goto S195;
  if (c1 == '.') goto S163;
  if (c1 == '-') goto S148;
  if (c1 == ',') goto S198;
  if (c1 == '+') goto S144;
  if (c1 == '*') goto S192;
  if (c1 == ')') goto S202;
  if (c1 == '(') goto S200;
  if (c1 == '&') goto S167;
  if (c1 == '%') goto S171;
  if (c1 == '#') goto S188;
  if (c1 == '!') goto S153;
  if (c1 == ' ') goto S241;
  if ('\t' <= c1 && c1 <= '\r') goto S241;
  return m.FSM_HALT(c1);

S46:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S245;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S53:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S259;
  if (c1 == 'o') goto S252;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S61:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S266;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S68:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S273;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S75:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S279;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S82:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S287;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S89:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S294;
  if ('b' <= c1 && c1 <= 'z') goto S225;
  if (c1 == 'a') goto S301;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S97:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S314;
  if (c1 == 's') goto S308;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S105:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S321;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S112:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S328;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S119:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S225;
  if (c1 == 'a') goto S335;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S126:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S225;
  if (c1 == 'a') goto S342;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S133:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S349;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S140:
  m.FSM_TAKE(72);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S358;
  if (c1 == ':') goto S356;
  return m.FSM_HALT(c1);

S144:
  m.FSM_TAKE(59);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S362;
  if (c1 == '+') goto S360;
  return m.FSM_HALT(c1);

S148:
  m.FSM_TAKE(68);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S368;
  if (c1 == '=') goto S366;
  if (c1 == '-') goto S364;
  return m.FSM_HALT(c1);

S153:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S370;
  return m.FSM_HALT(c1);

S156:
  m.FSM_TAKE(23);
  return m.FSM_HALT();

S158:
  m.FSM_TAKE(80);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S374;
  if (c1 == '=') goto S377;
  if (c1 == '.') goto S372;
  return m.FSM_HALT(c1);

S163:
  m.FSM_TAKE(51);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S380;
  if ('0' <= c1 && c1 <= '9') goto S382;
  return m.FSM_HALT(c1);

S167:
  m.FSM_TAKE(26);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S391;
  if (c1 == '&') goto S389;
  return m.FSM_HALT(c1);

S171:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S393;
  return m.FSM_HALT(c1);

S174:
  m.FSM_TAKE(36);
  c1 = m.FSM_CHAR();
  if (c1 == '|') goto S398;
  if (c1 == '>') goto S395;
  if (c1 == '=') goto S400;
  return m.FSM_HALT(c1);

S179:
  m.FSM_TAKE(81);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S402;
  return m.FSM_HALT(c1);

S182:
  m.FSM_TAKE(73);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S404;
  return m.FSM_HALT(c1);

S185:
  m.FSM_TAKE(35);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S406;
  return m.FSM_HALT(c1);

S188:
  m.FSM_TAKE(37);
  return m.FSM_HALT();

S190:
  m.FSM_TAKE(40);
  return m.FSM_HALT();

S192:
  m.FSM_TAKE(69);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S408;
  return m.FSM_HALT(c1);

S195:
  m.FSM_TAKE(70);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S410;
  return m.FSM_HALT(c1);

S198:
  m.FSM_TAKE(53);
  return m.FSM_HALT();

S200:
  m.FSM_TAKE(54);
  return m.FSM_HALT();

S202:
  m.FSM_TAKE(55);
  return m.FSM_HALT();

S204:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S414;
  if (c1 == 'u') goto S423;
  if (c1 == 's') goto S432;
  if (c1 == 'i') goto S447;
  if (c1 == 'h') goto S428;
  if (c1 == 'c') goto S430;
  if (c1 == 'b') goto S421;
  if ('8' <= c1 && c1 <= '9') goto S434;
  if ('0' <= c1 && c1 <= '7') goto S437;
  if (c1 == '.') goto S412;
  return m.FSM_HALT(c1);

S216:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S423;
  if (c1 == 's') goto S432;
  if (c1 == 'i') goto S447;
  if (c1 == 'h') goto S428;
  if (c1 == 'c') goto S430;
  if ('0' <= c1 && c1 <= '9') goto S216;
  if (c1 == '.') goto S412;
  return m.FSM_HALT(c1);

S225:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S231:
  m.FSM_TAKE(75);
  return m.FSM_HALT();

S233:
  m.FSM_TAKE(76);
  return m.FSM_HALT();

S235:
  m.FSM_TAKE(77);
  return m.FSM_HALT();

S237:
  m.FSM_TAKE(78);
  return m.FSM_HALT();

S239:
  m.FSM_TAKE(79);
  return m.FSM_HALT();

S241:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S241;
  if ('\t' <= c1 && c1 <= '\r') goto S241;
  return m.FSM_HALT(c1);

S245:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S453;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S252:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S460;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S259:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S466;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S266:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S473;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S273:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S279:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S487;
  if (c1 == 'i') goto S480;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S287:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S494;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S294:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S501;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S301:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S508;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S308:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S314:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S515;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S321:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S522;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S328:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S529;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S335:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'm') goto S536;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S342:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S543;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S349:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S550;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S356:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S358:
  m.FSM_TAKE(71);
  return m.FSM_HALT();

S360:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S362:
  m.FSM_TAKE(41);
  return m.FSM_HALT();

S364:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S366:
  m.FSM_TAKE(42);
  return m.FSM_HALT();

S368:
  m.FSM_TAKE(52);
  return m.FSM_HALT();

S370:
  m.FSM_TAKE(34);
  return m.FSM_HALT();

S372:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S374:
  m.FSM_TAKE(29);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S557;
  return m.FSM_HALT(c1);

S377:
  m.FSM_TAKE(31);
  c1 = m.FSM_CHAR();
  if (c1 == '>') goto S559;
  return m.FSM_HALT(c1);

S380:
  m.FSM_TAKE(25);
  return m.FSM_HALT();

S382:
  m.FSM_TAKE(57);
  c1 = m.FSM_CHAR();
  if (c1 == 'q') goto S563;
  if (c1 == 'f') goto S561;
  if (c1 == 'e') goto S565;
  if (c1 == 'E') goto S565;
  if ('0' <= c1 && c1 <= '9') goto S382;
  return m.FSM_HALT(c1);

S389:
  m.FSM_TAKE(38);
  return m.FSM_HALT();

S391:
  m.FSM_TAKE(48);
  return m.FSM_HALT();

S393:
  m.FSM_TAKE(45);
  return m.FSM_HALT();

S395:
  m.FSM_TAKE(28);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S568;
  return m.FSM_HALT(c1);

S398:
  m.FSM_TAKE(39);
  return m.FSM_HALT();

S400:
  m.FSM_TAKE(50);
  return m.FSM_HALT();

S402:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S404:
  m.FSM_TAKE(33);
  return m.FSM_HALT();

S406:
  m.FSM_TAKE(49);
  return m.FSM_HALT();

S408:
  m.FSM_TAKE(43);
  return m.FSM_HALT();

S410:
  m.FSM_TAKE(44);
  return m.FSM_HALT();

S412:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S382;
  return m.FSM_HALT(c1);

S414:
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S570;
  if (c1 == 't') goto S570;
  if (c1 == 'i') goto S570;
  if (c1 == 'g') goto S570;
  if (c1 == 'd') goto S570;
  if (c1 == ':') goto S570;
  return m.FSM_HALT(c1);

S421:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '1') goto S581;
  return m.FSM_HALT(c1);

S423:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S595;
  if (c1 == 'i') goto S589;
  if (c1 == 'h') goto S591;
  if (c1 == 'c') goto S593;
  return m.FSM_HALT(c1);

S428:
  m.FSM_TAKE(62);
  return m.FSM_HALT();

S430:
  m.FSM_TAKE(64);
  return m.FSM_HALT();

S432:
  m.FSM_TAKE(66);
  return m.FSM_HALT();

S434:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S434;
  if (c1 == '.') goto S412;
  return m.FSM_HALT(c1);

S437:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S423;
  if (c1 == 's') goto S432;
  if (c1 == 'i') goto S447;
  if (c1 == 'h') goto S428;
  if (c1 == 'c') goto S430;
  if ('8' <= c1 && c1 <= '9') goto S434;
  if ('0' <= c1 && c1 <= '7') goto S437;
  if (c1 == '.') goto S412;
  return m.FSM_HALT(c1);

S447:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S423;
  if (c1 == 's') goto S432;
  if (c1 == 'h') goto S428;
  if (c1 == 'c') goto S430;
  return m.FSM_HALT(c1);

S453:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S597;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S460:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S466:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S604;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S473:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S610;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S480:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S617;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S487:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S623;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S494:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S629;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S501:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S636;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S508:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S643;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S515:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S649;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S522:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S655;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S529:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S662;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S536:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S669;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S543:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S676;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S550:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S683;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S557:
  m.FSM_TAKE(46);
  return m.FSM_HALT();

S559:
  m.FSM_TAKE(30);
  return m.FSM_HALT();

S561:
  m.FSM_TAKE(56);
  return m.FSM_HALT();

S563:
  m.FSM_TAKE(58);
  return m.FSM_HALT();

S565:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S690;
  if (c1 == '+') goto S690;
  return m.FSM_HALT(c1);

S568:
  m.FSM_TAKE(47);
  return m.FSM_HALT();

S570:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'x') goto S570;
  if (c1 == 'u') goto S423;
  if (c1 == 't') goto S570;
  if (c1 == 's') goto S432;
  if (c1 == 'h') goto S428;
  if ('g' <= c1 && c1 <= 'i') goto S570;
  if (c1 == 'd') goto S570;
  if (c1 == 'c') goto S430;
  if (c1 == ':') goto S570;
  return m.FSM_HALT(c1);

S581:
  m.FSM_TAKE(60);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S423;
  if (c1 == 's') goto S432;
  if (c1 == 'i') goto S447;
  if (c1 == 'h') goto S428;
  if (c1 == 'c') goto S430;
  if ('0' <= c1 && c1 <= '1') goto S581;
  return m.FSM_HALT(c1);

S589:
  m.FSM_TAKE(61);
  return m.FSM_HALT();

S591:
  m.FSM_TAKE(63);
  return m.FSM_HALT();

S593:
  m.FSM_TAKE(65);
  return m.FSM_HALT();

S595:
  m.FSM_TAKE(67);
  return m.FSM_HALT();

S597:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S692;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S604:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S610:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S699;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S617:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S623:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S629:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S705;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S636:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S712;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S643:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S649:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S655:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'w') goto S719;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S662:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S725;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S669:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S731;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S676:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S738;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S683:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S225;
  if (c1 == 'a') goto S744;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S690:
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S751;
  return m.FSM_HALT(c1);

S692:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S756;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S699:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S705:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S762;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S712:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S768;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S719:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S725:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S731:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S775;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S738:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S744:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S782;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S751:
  m.FSM_TAKE(57);
  c1 = m.FSM_CHAR();
  if (c1 == 'q') goto S563;
  if (c1 == 'f') goto S561;
  if ('0' <= c1 && c1 <= '9') goto S751;
  return m.FSM_HALT(c1);

S756:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S762:
  m.FSM_TAKE(8);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S768:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S789;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S775:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S225;
  if (c1 == 'a') goto S796;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S782:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S803;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S789:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S810;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S796:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S816;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S803:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S823;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S810:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S816:
  m.FSM_TAKE(74);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S829;
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S823:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);

S829:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S225;
  if (c1 == '_') goto S225;
  if ('A' <= c1 && c1 <= 'Z') goto S225;
  if ('0' <= c1 && c1 <= '9') goto S225;
  return m.FSM_HALT(c1);
}

